// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GEOGRAPHY = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HIGH = 57464
const HOUR = 57465
const IF = 57466
const IFNULL = 57467
const ILIKE = 57468
const IN = 57469
const INTERLEAVE = 57470
const INDEX = 57471
const INDEXES = 57472
const INITIALLY = 57473
const INNER = 57474
const INSERT = 57475
const INT = 57476
const INT8 = 57477
const INT64 = 57478
const INTEGER = 57479
const INTERSECT = 57480
const INTERVAL = 57481
const INTO = 57482
const IS = 57483
const ISOLATION = 57484
const JOIN = 57485
const KEY = 57486
const KEYS = 57487
const LATERAL = 57488
const LEADING = 57489
const LEAST = 57490
const LEFT = 57491
const LEVEL = 57492
const LIKE = 57493
const LIMIT = 57494
const LOCAL = 57495
const LOCALTIME = 57496
const LOCALTIMESTAMP = 57497
const LOW = 57498
const LSHIFT = 57499
const MATCH = 57500
const MINUTE = 57501
const MONTH = 57502
const NAME = 57503
const NAMES = 57504
const NATURAL = 57505
const NEXT = 57506
const NO = 57507
const NO_INDEX_JOIN = 57508
const NORMAL = 57509
const NOT = 57510
const NOTHING = 57511
const NULL = 57512
const NULLIF = 57513
const NULLS = 57514
const NUMERIC = 57515
const OF = 57516
const OFF = 57517
const OFFSET = 57518
const ON = 57519
const ONLY = 57520
const OR = 57521
const ORDER = 57522
const ORDINALITY = 57523
const OUT = 57524
const OUTER = 57525
const OVER = 57526
const OVERLAPS = 57527
const OVERLAY = 57528
const PARENT = 57529
const PARTIAL = 57530
const PARTITION = 57531
const PLACING = 57532
const POSITION = 57533
const PRECEDING = 57534
const PRECISION = 57535
const PREPARE = 57536
const PRIMARY = 57537
const PRIORITY = 57538
const RANGE = 57539
const READ = 57540
const REAL = 57541
const RECURSIVE = 57542
const REF = 57543
const REFERENCES = 57544
const RENAME = 57545
const REPEATABLE = 57546
const RELEASE = 57547
const RESTRICT = 57548
const RETURNING = 57549
const REVOKE = 57550
const RIGHT = 57551
const ROLLBACK = 57552
const ROLLUP = 57553
const ROW = 57554
const ROWS = 57555
const RSHIFT = 57556
const SAVEPOINT = 57557
const SEARCH = 57558
const SECOND = 57559
const SELECT = 57560
const SERIAL = 57561
const SERIALIZABLE = 57562
const SESSION = 57563
const SESSION_USER = 57564
const SET = 57565
const SHOW = 57566
const SIMILAR = 57567
const SIMPLE = 57568
const SMALLINT = 57569
const SMALLSERIAL = 57570
const SNAPSHOT = 57571
const SOME = 57572
const SPLIT = 57573
const SQL = 57574
const START = 57575
const STDIN = 57576
const STRICT = 57577
const STRING = 57578
const STORING = 57579
const SUBSTRING = 57580
const SYMMETRIC = 57581
const SYSTEM = 57582
const TABLE = 57583
const TABLES = 57584
const TEXT = 57585
const THEN = 57586
const TIME = 57587
const TIMESTAMP = 57588
const TIMESTAMPTZ = 57589
const TO = 57590
const TRAILING = 57591
const TRANSACTION = 57592
const TREAT = 57593
const TRIM = 57594
const TRUE = 57595
const TRUNCATE = 57596
const TYPE = 57597
const UNBOUNDED = 57598
const UNCOMMITTED = 57599
const UNION = 57600
const UNIQUE = 57601
const UNKNOWN = 57602
const UPDATE = 57603
const UPSERT = 57604
const USER = 57605
const USING = 57606
const VALID = 57607
const VALIDATE = 57608
const VALUE = 57609
const VALUES = 57610
const VARCHAR = 57611
const VARIADIC = 57612
const VIEW = 57613
const VARYING = 57614
const WHEN = 57615
const WHERE = 57616
const WINDOW = 57617
const WITH = 57618
const WITHIN = 57619
const WITHOUT = 57620
const YEAR = 57621
const ZONE = 57622
const NOT_LA = 57623
const WITH_LA = 57624
const AS_LA = 57625
const POSTFIXOP = 57626
const UMINUS = 57627

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GEOGRAPHY",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4841

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	304, 26,
	-2, 372,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	1, 347,
	177, 347,
	207, 347,
	302, 347,
	304, 347,
	-2, 357,
	-1, 56,
	1, 350,
	177, 350,
	207, 350,
	302, 350,
	304, 350,
	-2, 356,
	-1, 65,
	1, 26,
	304, 26,
	-2, 372,
	-1, 284,
	1, 172,
	304, 172,
	-2, 871,
	-1, 318,
	152, 382,
	176, 382,
	-2, 353,
	-1, 321,
	152, 381,
	176, 381,
	-2, 351,
	-1, 454,
	152, 381,
	176, 381,
	-2, 354,
	-1, 510,
	301, 810,
	-2, 803,
	-1, 511,
	301, 811,
	-2, 804,
	-1, 517,
	5, 518,
	301, 518,
	-2, 962,
	-1, 540,
	5, 484,
	-2, 936,
	-1, 541,
	5, 512,
	301, 512,
	-2, 938,
	-1, 542,
	5, 492,
	-2, 939,
	-1, 543,
	5, 491,
	-2, 940,
	-1, 544,
	5, 512,
	301, 512,
	-2, 943,
	-1, 545,
	5, 512,
	301, 512,
	-2, 944,
	-1, 546,
	5, 513,
	-2, 947,
	-1, 547,
	5, 478,
	-2, 948,
	-1, 548,
	5, 478,
	-2, 949,
	-1, 549,
	5, 494,
	-2, 952,
	-1, 550,
	5, 479,
	-2, 958,
	-1, 551,
	5, 480,
	-2, 959,
	-1, 552,
	5, 481,
	-2, 960,
	-1, 553,
	5, 482,
	-2, 961,
	-1, 554,
	5, 478,
	-2, 965,
	-1, 555,
	5, 485,
	-2, 970,
	-1, 556,
	5, 483,
	-2, 973,
	-1, 557,
	5, 510,
	301, 510,
	-2, 975,
	-1, 558,
	5, 514,
	-2, 978,
	-1, 559,
	5, 516,
	-2, 979,
	-1, 560,
	5, 509,
	301, 509,
	-2, 983,
	-1, 891,
	97, 357,
	138, 357,
	152, 357,
	176, 357,
	180, 357,
	258, 357,
	-2, 630,
	-1, 899,
	301, 788,
	-2, 777,
	-1, 1098,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 553,
	-1, 1099,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 554,
	-1, 1100,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 555,
	-1, 1104,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 559,
	-1, 1105,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 560,
	-1, 1106,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 561,
	-1, 1109,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 566,
	-1, 1115,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 568,
	-1, 1118,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 573,
	-1, 1119,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 574,
	-1, 1120,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 575,
	-1, 1145,
	185, 701,
	-2, 704,
	-1, 1317,
	97, 357,
	138, 357,
	152, 357,
	176, 357,
	180, 357,
	258, 357,
	-2, 430,
	-1, 1321,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 567,
	-1, 1322,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 569,
	-1, 1327,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 570,
	-1, 1345,
	185, 700,
	-2, 703,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 571,
	-1, 1513,
	141, 0,
	-2, 585,
	-1, 1521,
	185, 702,
	-2, 705,
	-1, 1555,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 611,
	-1, 1556,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 612,
	-1, 1557,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 613,
	-1, 1561,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 617,
	-1, 1562,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 618,
	-1, 1563,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 619,
	-1, 1667,
	141, 0,
	-2, 586,
	-1, 1670,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 589,
	-1, 1671,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 591,
	-1, 1758,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 590,
	-1, 1759,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 592,
	-1, 1766,
	141, 0,
	-2, 620,
	-1, 1811,
	141, 0,
	-2, 621,
	-1, 1863,
	35, 0,
	126, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 935,
}

const sqlNprod = 1078
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24834

var sqlAct = [...]int{

	511, 1475, 1862, 1843, 1817, 1710, 1885, 1844, 1861, 976,
	1845, 984, 1532, 1659, 816, 322, 1070, 1733, 1632, 1746,
	596, 1633, 285, 1653, 356, 42, 894, 1592, 72, 509,
	508, 501, 343, 1646, 1314, 820, 1047, 72, 72, 72,
	1243, 1052, 72, 1487, 73, 72, 1079, 706, 1348, 1400,
	691, 1304, 896, 72, 1401, 1048, 1313, 1051, 473, 823,
	72, 72, 1016, 1497, 72, 1078, 576, 72, 72, 72,
	985, 945, 573, 954, 1000, 1298, 1191, 1155, 18, 1194,
	1131, 25, 561, 1128, 327, 1082, 329, 55, 1009, 771,
	755, 1080, 578, 14, 7, 441, 592, 355, 483, 442,
	838, 1042, 474, 357, 358, 930, 321, 371, 782, 752,
	926, 377, 370, 368, 246, 978, 244, 251, 844, 457,
	9, 8, 55, 6, 4, 1055, 332, 458, 56, 250,
	252, 456, 272, 751, 773, 769, 57, 263, 364, 684,
	330, 1753, 461, 693, 1754, 693, 1877, 977, 693, 1074,
	1859, 1851, 55, 1732, 1074, 340, 253, 248, 346, 247,
	249, 1841, 1836, 326, 1006, 1074, 1813, 326, 1807, 1006,
	254, 1074, 282, 1797, 1787, 1312, 1732, 1074, 1254, 1760,
	349, 1255, 1006, 1757, 319, 310, 1074, 1743, 1740, 846,
	1732, 1074, 318, 847, 848, 1731, 1715, 477, 1732, 1074,
	61, 334, 1714, 1692, 1672, 1074, 1019, 1019, 1669, 1619,
	588, 1006, 1019, 54, 1618, 1604, 850, 1019, 1074, 1517,
	1019, 1461, 1019, 63, 973, 1455, 1418, 1416, 973, 1419,
	1019, 1415, 1414, 1345, 1019, 1019, 1019, 849, 1302, 34,
	72, 72, 72, 72, 72, 1801, 380, 35, 1343, 1735,
	64, 1371, 1372, 1344, 1389, 1390, 1391, 707, 59, 72,
	1301, 845, 1301, 1342, 60, 373, 373, 1666, 1019, 563,
	1283, 327, 1075, 1074, 72, 1074, 1028, 72, 72, 1019,
	1568, 1018, 1005, 58, 1019, 1006, 972, 440, 1347, 973,
	381, 855, 1019, 942, 701, 1520, 941, 702, 1281, 943,
	1284, 1386, 1074, 694, 1021, 694, 1139, 1069, 694, 1036,
	72, 469, 72, 811, 72, 72, 359, 72, 810, 468,
	360, 763, 65, 981, 762, 406, 339, 61, 382, 359,
	360, 365, 72, 360, 455, 796, 448, 450, 426, 1860,
	865, 1857, 1850, 72, 1808, 1741, 847, 848, 1697, 1377,
	63, 374, 1693, 1685, 378, 72, 1684, 1683, 1678, 1013,
	1677, 599, 72, 72, 72, 61, 72, 454, 1676, 850,
	1136, 1630, 568, 1254, 1583, 414, 1578, 64, 902, 415,
	594, 845, 1392, 1577, 1624, 1576, 1523, 1506, 63, 1486,
	849, 1465, 1423, 1420, 1408, 567, 1399, 866, 1387, 72,
	1370, 1014, 697, 447, 692, 600, 72, 814, 72, 1367,
	58, 353, 1365, 1353, 1352, 64, 1282, 1208, 1162, 380,
	380, 1161, 696, 59, 468, 699, 467, 599, 72, 60,
	72, 72, 72, 72, 72, 72, 72, 1015, 1012, 1286,
	72, 819, 445, 601, 855, 72, 1534, 797, 58, 1827,
	1800, 1779, 72, 365, 1777, 1388, 1768, 61, 319, 1137,
	847, 848, 1750, 381, 381, 818, 318, 464, 465, 1738,
	72, 600, 470, 72, 859, 851, 852, 853, 854, 856,
	63, 876, 749, 850, 1463, 1729, 1707, 1690, 1371, 1372,
	703, 1662, 761, 865, 359, 1017, 1629, 813, 360, 1640,
	683, 382, 382, 686, 849, 847, 848, 64, 1623, 601,
	1512, 1505, 1483, 327, 1481, 59, 847, 848, 1480, 1478,
	1435, 60, 1434, 899, 1398, 1383, 1384, 1385, 842, 1382,
	1379, 1380, 1381, 1373, 1374, 1375, 1376, 1378, 1386, 850,
	980, 759, 897, 1361, 758, 1371, 1372, 1360, 1339, 849,
	866, 1335, 1133, 1270, 1235, 786, 793, 1011, 855, 1234,
	849, 1222, 1221, 801, 1201, 1160, 1073, 893, 931, 934,
	938, 924, 72, 923, 922, 921, 920, 812, 828, 1010,
	72, 919, 1371, 1372, 72, 827, 1377, 826, 72, 72,
	319, 918, 443, 319, 319, 917, 840, 916, 834, 354,
	798, 835, 836, 802, 803, 804, 805, 806, 915, 914,
	913, 1222, 809, 912, 911, 910, 909, 847, 848, 900,
	898, 948, 58, 877, 878, 879, 815, 344, 851, 852,
	853, 854, 856, 254, 876, 1387, 472, 569, 412, 402,
	850, 400, 881, 1377, 1628, 1264, 847, 848, 1263, 584,
	1755, 503, 959, 961, 932, 928, 929, 1627, 833, 1422,
	935, 849, 1256, 420, 1064, 936, 1421, 864, 1320, 937,
	737, 1013, 436, 421, 903, 964, 54, 907, 1647, 977,
	1377, 1535, 1156, 927, 1250, 1429, 939, 1823, 72, 316,
	72, 72, 1388, 72, 1356, 275, 72, 1786, 72, 72,
	968, 72, 34, 380, 1873, 951, 1612, 1874, 1027, 303,
	35, 1277, 569, 1014, 309, 855, 308, 304, 1723, 1722,
	994, 373, 1449, 373, 240, 1650, 1371, 1372, 1426, 1387,
	1425, 947, 1323, 874, 882, 1269, 1268, 1446, 1267, 1266,
	1116, 1020, 851, 852, 853, 854, 856, 381, 876, 1015,
	1012, 970, 967, 444, 72, 72, 1748, 1205, 872, 1204,
	1087, 439, 398, 979, 865, 979, 1382, 1379, 1380, 1381,
	1373, 1374, 1375, 1376, 1378, 241, 68, 1462, 312, 1130,
	246, 1130, 1450, 251, 1001, 382, 1388, 1003, 55, 1785,
	1239, 590, 55, 876, 1437, 250, 252, 599, 418, 1002,
	1004, 72, 983, 1167, 876, 992, 995, 1017, 996, 993,
	1023, 378, 1177, 947, 998, 72, 72, 1041, 997, 946,
	72, 866, 253, 248, 1377, 247, 249, 67, 61, 1375,
	1376, 1378, 875, 1470, 1017, 1825, 419, 932, 687, 935,
	1882, 600, 1244, 579, 579, 580, 580, 72, 1453, 1113,
	72, 63, 313, 1893, 1076, 1838, 929, 928, 955, 1030,
	1024, 1025, 1029, 1022, 1373, 1374, 1375, 1376, 1378, 1011,
	317, 1839, 1086, 1387, 1156, 1252, 1712, 1278, 64, 601,
	1170, 1873, 314, 1847, 599, 586, 59, 242, 873, 847,
	848, 1017, 60, 1067, 1068, 860, 857, 858, 859, 851,
	852, 853, 854, 856, 1134, 876, 1046, 1045, 1248, 1276,
	1044, 245, 850, 585, 581, 581, 1237, 243, 958, 594,
	1371, 1372, 1171, 1444, 594, 1438, 589, 579, 600, 580,
	1388, 1780, 417, 849, 876, 693, 236, 925, 1244, 66,
	1111, 1114, 1371, 1372, 1764, 72, 72, 72, 1077, 1207,
	1143, 72, 791, 790, 72, 784, 779, 1848, 1172, 1169,
	72, 72, 72, 72, 72, 1110, 601, 1881, 72, 1730,
	416, 72, 409, 411, 72, 562, 890, 1140, 1144, 437,
	1147, 72, 237, 72, 1359, 1498, 1325, 855, 1129, 1135,
	72, 1152, 1215, 325, 460, 1849, 1186, 326, 581, 1467,
	72, 957, 1198, 1199, 1200, 944, 327, 1381, 1373, 1374,
	1375, 1376, 1378, 1894, 1209, 1846, 1173, 1872, 1377, 1246,
	261, 72, 72, 1032, 417, 1233, 577, 72, 1600, 1034,
	1593, 1232, 794, 438, 324, 1468, 1210, 380, 1591, 1112,
	1377, 1870, 1595, 1645, 1258, 1035, 1259, 1260, 1713, 1062,
	1880, 429, 713, 1717, 1033, 407, 459, 72, 405, 72,
	1601, 72, 1564, 72, 264, 956, 72, 1387, 1600, 1491,
	1899, 1888, 516, 792, 1466, 72, 326, 1249, 1168, 1594,
	460, 381, 72, 1289, 72, 269, 1257, 743, 582, 582,
	265, 1261, 1285, 1017, 1287, 694, 1688, 496, 1716, 1705,
	1601, 795, 1774, 1428, 1218, 1084, 1085, 1608, 1214, 327,
	239, 238, 1273, 1178, 266, 1063, 1818, 737, 737, 382,
	825, 484, 1272, 1275, 1388, 70, 1279, 817, 1274, 1280,
	1319, 268, 459, 808, 255, 256, 257, 764, 1288, 274,
	1290, 1565, 286, 1706, 1596, 1224, 1597, 1566, 1296, 69,
	274, 1656, 1001, 1223, 323, 1003, 1898, 333, 333, 327,
	55, 70, 565, 1346, 70, 70, 352, 1002, 1004, 1318,
	1295, 1599, 582, 853, 854, 856, 1493, 876, 1602, 1660,
	1611, 1689, 1492, 416, 1596, 341, 1597, 1610, 348, 351,
	1886, 1607, 1303, 264, 363, 1326, 362, 1324, 1382, 1379,
	1380, 1381, 1373, 1374, 1375, 1376, 1378, 324, 327, 451,
	1219, 1599, 1476, 1338, 269, 1307, 267, 1340, 1602, 265,
	1631, 1703, 737, 72, 1373, 1374, 1375, 1376, 1378, 1350,
	1351, 1887, 1355, 1310, 1661, 1598, 1488, 1158, 1299, 1307,
	785, 780, 1704, 266, 1496, 1159, 768, 1767, 1889, 1687,
	1308, 1402, 1511, 1366, 1334, 72, 72, 1310, 1240, 270,
	268, 1026, 1397, 1457, 1262, 1405, 1406, 1407, 1305, 971,
	435, 1609, 434, 1410, 1308, 1598, 737, 433, 1433, 1441,
	766, 1443, 72, 1424, 432, 72, 431, 72, 1306, 430,
	427, 767, 361, 72, 1431, 1403, 908, 800, 1842, 1815,
	1589, 1442, 72, 1452, 1482, 1445, 72, 1440, 1219, 1427,
	1309, 1456, 72, 599, 1447, 1448, 72, 1292, 72, 1065,
	737, 1459, 1479, 1060, 999, 1458, 1178, 1178, 1232, 1460,
	1469, 1471, 1472, 1502, 1309, 700, 698, 70, 366, 70,
	286, 286, 1477, 695, 690, 267, 587, 583, 1490, 1529,
	824, 1724, 1494, 462, 1485, 337, 403, 600, 1495, 1071,
	72, 341, 1874, 351, 788, 1525, 1526, 1527, 1501, 423,
	1726, 408, 1499, 1500, 286, 286, 736, 1178, 1178, 1178,
	750, 1332, 963, 1514, 1454, 947, 1126, 3, 270, 1735,
	947, 962, 1782, 1810, 1330, 601, 960, 1522, 1489, 1124,
	466, 260, 966, 965, 1802, 1643, 302, 274, 1061, 70,
	1536, 286, 286, 1059, 452, 982, 1072, 841, 1541, 1518,
	463, 760, 338, 705, 1008, 1896, 72, 72, 72, 333,
	1897, 1371, 1372, 341, 1803, 72, 72, 847, 848, 1584,
	70, 72, 271, 72, 1473, 72, 72, 72, 424, 1464,
	72, 1572, 70, 345, 1417, 1571, 305, 306, 1265, 70,
	70, 70, 1328, 688, 570, 1122, 1333, 1121, 1585, 1588,
	1206, 1127, 1203, 712, 1038, 1037, 593, 1202, 1569, 1153,
	1039, 72, 72, 341, 685, 685, 1674, 1528, 1293, 1579,
	1605, 1606, 1040, 72, 72, 564, 70, 72, 1626, 713,
	713, 513, 1644, 756, 901, 756, 72, 72, 1638, 1637,
	1639, 311, 1621, 1638, 1637, 1639, 1711, 262, 1642, 799,
	341, 428, 1178, 1178, 1837, 286, 1680, 756, 286, 286,
	286, 286, 286, 807, 1625, 72, 1641, 286, 1358, 1651,
	1652, 1664, 274, 1657, 1745, 1329, 1763, 1157, 906, 822,
	1123, 33, 1331, 1635, 489, 1590, 1430, 1125, 1054, 1053,
	1668, 1663, 602, 739, 789, 778, 512, 333, 772, 1649,
	843, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
	1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
	72, 1178, 72, 781, 72, 72, 1686, 1166, 566, 514,
	710, 515, 711, 72, 713, 737, 933, 502, 708, 376,
	1300, 986, 1154, 1354, 904, 488, 1701, 494, 493, 1698,
	1141, 1538, 1539, 399, 72, 485, 1658, 1311, 45, 1543,
	1544, 1699, 413, 737, 737, 280, 281, 1247, 1622, 1066,
	829, 737, 737, 1439, 315, 1368, 72, 401, 72, 1184,
	1176, 1174, 1165, 1736, 446, 572, 987, 72, 713, 1739,
	1727, 1734, 1575, 72, 1720, 1721, 425, 1253, 1007, 70,
	1638, 1637, 1639, 471, 737, 837, 1749, 952, 336, 1725,
	335, 70, 1049, 422, 765, 70, 969, 1031, 307, 1776,
	1217, 1762, 1892, 940, 1781, 1436, 1822, 62, 24, 22,
	21, 20, 713, 1752, 72, 341, 19, 17, 16, 351,
	15, 23, 1778, 13, 12, 11, 475, 475, 1756, 10,
	32, 31, 1742, 72, 72, 574, 30, 72, 1772, 29,
	28, 72, 5, 2, 1, 0, 72, 1790, 1769, 1773,
	595, 0, 0, 1798, 0, 0, 0, 0, 0, 1799,
	1792, 72, 0, 1794, 1791, 327, 599, 0, 1793, 594,
	0, 0, 1638, 1637, 1639, 0, 0, 1805, 0, 0,
	0, 0, 0, 0, 0, 0, 1806, 0, 72, 1809,
	72, 72, 737, 72, 0, 70, 0, 990, 991, 0,
	70, 0, 1828, 70, 0, 286, 286, 1826, 286, 1178,
	600, 1832, 72, 1831, 0, 1824, 1804, 0, 0, 988,
	0, 0, 1830, 1829, 351, 1835, 1812, 351, 1796, 1833,
	0, 1834, 0, 736, 736, 0, 72, 0, 72, 0,
	1638, 1637, 1639, 1858, 0, 1820, 1852, 1854, 601, 0,
	830, 832, 1303, 72, 0, 0, 1856, 839, 1867, 0,
	0, 756, 843, 1871, 0, 1869, 0, 1875, 0, 885,
	886, 887, 888, 889, 1876, 1878, 1879, 0, 892, 0,
	1719, 0, 0, 0, 0, 0, 0, 0, 0, 1891,
	1895, 1890, 737, 1855, 0, 1178, 0, 0, 905, 1307,
	1840, 0, 0, 0, 0, 0, 738, 0, 1043, 1900,
	0, 0, 709, 0, 0, 0, 0, 1310, 0, 0,
	0, 0, 70, 1050, 0, 0, 0, 843, 1305, 0,
	712, 712, 0, 0, 1308, 0, 0, 0, 736, 0,
	0, 0, 0, 0, 0, 0, 341, 0, 1306, 847,
	848, 1336, 1337, 0, 70, 0, 0, 286, 0, 0,
	0, 0, 1655, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 850, 0, 0, 1178, 0, 0, 341, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 736, 849, 1309, 0, 0, 713, 0, 864,
	0, 0, 1394, 1395, 1396, 0, 0, 0, 0, 0,
	0, 0, 0, 1371, 1372, 0, 1389, 1390, 1391, 0,
	739, 739, 0, 0, 0, 713, 713, 0, 0, 1665,
	0, 0, 0, 713, 713, 712, 736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 737, 1654,
	0, 0, 70, 1212, 1213, 0, 0, 0, 952, 0,
	0, 1220, 0, 1386, 0, 0, 713, 1225, 1226, 1228,
	1230, 1231, 0, 0, 0, 1236, 1211, 0, 1238, 0,
	0, 70, 0, 0, 0, 0, 0, 0, 70, 712,
	1251, 0, 0, 0, 0, 0, 865, 70, 0, 0,
	0, 0, 0, 0, 0, 1241, 0, 70, 0, 0,
	0, 1377, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 593, 0, 0, 0, 739, 0, 0, 1043, 756,
	0, 341, 0, 712, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1392, 0, 0, 1509, 1510, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	1387, 0, 0, 0, 822, 0, 822, 0, 286, 0,
	70, 0, 0, 1294, 713, 0, 0, 0, 0, 739,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 1316,
	0, 70, 1371, 1372, 1291, 0, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 341, 1567, 1388, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 860, 857, 858,
	859, 851, 852, 853, 854, 856, 475, 876, 0, 0,
	0, 0, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 0, 1115, 0, 1117, 1118, 1119,
	1120, 0, 0, 0, 713, 0, 0, 0, 0, 490,
	43, 0, 0, 0, 0, 0, 0, 1383, 1384, 1385,
	1377, 1382, 1379, 1380, 1381, 1373, 1374, 1375, 1376, 1378,
	0, 0, 1163, 1164, 0, 1175, 0, 1185, 1187, 1192,
	1195, 1196, 1197, 0, 0, 43, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	843, 0, 574, 0, 0, 320, 0, 0, 328, 1387,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 736,
	736, 0, 713, 738, 738, 0, 0, 736, 736, 709,
	709, 0, 70, 70, 0, 0, 1242, 0, 1245, 0,
	1371, 1372, 0, 1389, 1390, 1391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 988, 341, 0, 1474,
	736, 0, 952, 0, 822, 0, 1388, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	1271, 0, 0, 70, 0, 0, 0, 0, 712, 1316,
	1386, 0, 0, 1504, 1708, 1316, 0, 0, 0, 0,
	713, 0, 0, 341, 0, 0, 0, 341, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 712, 0, 0,
	0, 0, 0, 0, 712, 712, 0, 0, 738, 0,
	839, 0, 0, 0, 709, 0, 0, 1533, 1377, 0,
	0, 1379, 1380, 1381, 1373, 1374, 1375, 1376, 1378, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 1321, 1322, 0, 0, 0, 0, 1327, 739, 0,
	1766, 0, 738, 0, 0, 0, 0, 1387, 709, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	1341, 0, 0, 1586, 1587, 952, 739, 739, 0, 1349,
	0, 0, 843, 843, 739, 739, 0, 1357, 1613, 0,
	1614, 1362, 70, 1616, 1617, 0, 738, 1620, 0, 0,
	0, 0, 709, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 892, 1388, 0, 1615, 739, 0, 1192,
	1192, 1192, 0, 0, 0, 0, 1634, 0, 843, 1050,
	1811, 1634, 0, 0, 0, 712, 0, 0, 736, 0,
	70, 70, 0, 0, 70, 0, 0, 0, 0, 320,
	0, 0, 1432, 843, 1316, 847, 848, 0, 0, 0,
	0, 0, 0, 0, 341, 341, 0, 0, 341, 0,
	0, 0, 0, 0, 0, 475, 0, 0, 850, 0,
	0, 0, 1681, 475, 1383, 1384, 1385, 574, 1382, 1379,
	1380, 1381, 1373, 1374, 1375, 1376, 1378, 0, 0, 849,
	0, 0, 0, 847, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 736, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 0, 952, 0, 1700,
	0, 286, 1702, 0, 0, 0, 0, 849, 0, 0,
	70, 1507, 0, 855, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 843, 0, 0, 1709, 0, 0, 0, 1271, 0,
	0, 320, 0, 0, 320, 320, 0, 1530, 1634, 0,
	0, 0, 0, 70, 736, 1747, 0, 1540, 0, 0,
	1542, 855, 865, 0, 70, 0, 0, 891, 0, 0,
	843, 895, 0, 712, 0, 0, 0, 1744, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 341, 0,
	0, 0, 0, 1573, 1574, 0, 0, 0, 0, 0,
	0, 0, 1580, 1581, 1582, 0, 0, 0, 0, 0,
	865, 822, 0, 0, 0, 0, 0, 0, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1783, 1784, 0, 0, 1788, 0, 0, 0, 1789, 0,
	1634, 738, 0, 286, 475, 0, 0, 709, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 739, 0, 0, 0, 866, 0, 738,
	738, 0, 0, 0, 0, 709, 709, 738, 738, 1648,
	0, 0, 0, 709, 709, 1819, 0, 843, 70, 0,
	286, 0, 0, 860, 857, 858, 859, 851, 852, 853,
	854, 856, 1667, 876, 0, 0, 1670, 1671, 1634, 1747,
	738, 1673, 1821, 0, 0, 1675, 709, 0, 0, 0,
	0, 0, 1679, 0, 0, 0, 1682, 0, 0, 0,
	0, 0, 0, 70, 0, 843, 287, 0, 0, 0,
	0, 739, 857, 858, 859, 851, 852, 853, 854, 856,
	1868, 876, 0, 0, 300, 0, 0, 988, 0, 1691,
	0, 0, 0, 0, 43, 0, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 43, 0, 0, 0, 289,
	0, 0, 0, 0, 294, 295, 0, 0, 301, 0,
	0, 1718, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 290, 0, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 0, 0, 709, 0, 0, 1737, 0, 847,
	848, 0, 867, 868, 869, 877, 878, 879, 0, 0,
	26, 0, 0, 0, 0, 870, 1751, 0, 0, 291,
	0, 47, 850, 0, 881, 0, 1758, 1759, 0, 0,
	0, 292, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 849, 0, 49, 0, 296, 0, 864,
	0, 27, 0, 54, 0, 1771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1775, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 34,
	0, 0, 50, 0, 0, 0, 37, 35, 738, 0,
	574, 0, 0, 0, 709, 0, 1081, 855, 0, 0,
	0, 0, 0, 39, 0, 0, 847, 848, 0, 867,
	868, 869, 877, 878, 879, 874, 882, 0, 0, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 0, 850,
	880, 881, 1132, 0, 0, 0, 0, 0, 0, 0,
	872, 0, 0, 0, 297, 0, 865, 298, 0, 0,
	849, 0, 299, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 871, 0,
	0, 0, 709, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 0, 0, 1853, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 40, 0, 51, 0, 1866,
	1866, 0, 41, 866, 855, 61, 0, 0, 0, 0,
	44, 46, 0, 0, 875, 0, 0, 0, 0, 0,
	48, 0, 874, 882, 1866, 0, 0, 0, 63, 0,
	328, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	0, 53, 0, 0, 738, 0, 0, 872, 0, 0,
	709, 0, 0, 865, 0, 64, 0, 1866, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 0, 60,
	873, 0, 0, 861, 862, 863, 0, 860, 857, 858,
	859, 851, 852, 853, 854, 856, 0, 876, 58, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	866, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	861, 862, 863, 891, 860, 857, 858, 859, 851, 852,
	853, 854, 856, 0, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 891, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 1081, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 205, 0, 107, 206, 0, 207, 0,
	108, 109, 208, 209, 0, 0, 112, 0, 110, 0,
	0, 111, 210, 211, 212, 213, 0, 214, 0, 0,
	113, 1081, 114, 115, 0, 1081, 215, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 216,
	129, 217, 130, 131, 0, 0, 342, 0, 0, 132,
	218, 0, 133, 0, 219, 134, 135, 136, 0, 220,
	137, 221, 138, 0, 139, 140, 141, 222, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	223, 151, 0, 152, 153, 154, 61, 224, 155, 156,
	0, 157, 158, 0, 159, 225, 226, 160, 0, 166,
	161, 162, 163, 165, 227, 164, 228, 0, 167, 63,
	168, 169, 0, 229, 230, 231, 0, 0, 170, 232,
	233, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 383, 235, 0, 0,
	181, 0, 0, 0, 59, 182, 183, 184, 185, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 1081, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1728, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	75, 603, 76, 604, 605, 606, 607, 186, 608, 609,
	610, 611, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 612, 80, 193, 194, 81, 613, 614, 195, 196,
	197, 615, 198, 616, 384, 617, 82, 83, 84, 891,
	85, 618, 86, 87, 88, 619, 385, 89, 90, 620,
	621, 622, 623, 624, 625, 91, 92, 93, 94, 199,
	95, 200, 201, 626, 96, 627, 97, 628, 629, 630,
	98, 99, 631, 100, 632, 0, 633, 202, 101, 102,
	203, 634, 635, 636, 103, 104, 204, 0, 105, 637,
	106, 638, 639, 386, 205, 640, 107, 206, 641, 207,
	642, 108, 109, 208, 209, 388, 643, 112, 644, 110,
	645, 387, 111, 210, 211, 212, 213, 646, 214, 647,
	389, 113, 390, 114, 115, 648, 649, 215, 391, 116,
	392, 650, 117, 651, 652, 118, 0, 119, 120, 121,
	122, 123, 393, 124, 125, 128, 126, 653, 127, 654,
	216, 129, 217, 130, 131, 655, 656, 657, 658, 659,
	132, 218, 394, 133, 395, 219, 134, 135, 136, 660,
	220, 137, 221, 138, 661, 139, 140, 141, 222, 142,
	143, 662, 145, 146, 144, 147, 663, 148, 396, 149,
	150, 223, 151, 0, 152, 153, 154, 664, 224, 155,
	156, 665, 157, 158, 397, 159, 225, 226, 160, 666,
	166, 161, 162, 163, 165, 227, 164, 228, 667, 167,
	668, 168, 169, 669, 229, 230, 231, 670, 671, 170,
	232, 233, 672, 171, 172, 173, 174, 673, 674, 175,
	176, 177, 675, 676, 178, 179, 180, 234, 235, 677,
	678, 181, 679, 680, 681, 682, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1503, 74, 75, 603,
	76, 604, 605, 606, 607, 186, 608, 609, 610, 611,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 612,
	80, 193, 194, 81, 613, 614, 195, 196, 197, 615,
	198, 616, 384, 617, 82, 83, 84, 0, 85, 618,
	86, 87, 88, 619, 385, 89, 90, 620, 621, 622,
	623, 624, 625, 91, 92, 93, 94, 199, 95, 200,
	201, 626, 96, 627, 97, 628, 629, 630, 98, 99,
	631, 100, 632, 0, 633, 202, 101, 102, 203, 634,
	635, 636, 103, 104, 204, 0, 105, 637, 106, 638,
	639, 386, 205, 640, 107, 206, 641, 207, 642, 108,
	109, 208, 209, 388, 643, 112, 644, 110, 645, 387,
	111, 210, 211, 212, 213, 646, 214, 647, 389, 113,
	390, 114, 115, 648, 649, 215, 391, 116, 392, 650,
	117, 651, 652, 118, 0, 119, 120, 121, 122, 123,
	393, 124, 125, 128, 126, 653, 127, 654, 216, 129,
	217, 130, 131, 655, 656, 657, 658, 659, 132, 218,
	394, 133, 395, 219, 134, 135, 136, 660, 220, 137,
	221, 138, 661, 139, 140, 141, 222, 142, 143, 662,
	145, 146, 144, 147, 663, 148, 396, 149, 150, 223,
	151, 0, 152, 153, 154, 664, 224, 155, 156, 665,
	157, 158, 397, 159, 225, 226, 160, 666, 166, 161,
	162, 163, 165, 227, 164, 228, 667, 167, 668, 168,
	169, 669, 229, 230, 231, 670, 671, 170, 232, 233,
	672, 171, 172, 173, 174, 673, 674, 175, 176, 177,
	675, 676, 178, 179, 180, 234, 235, 677, 678, 181,
	679, 680, 681, 682, 182, 183, 184, 185, 598, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 597, 0, 0, 74, 75, 603, 76, 604, 605,
	606, 607, 186, 608, 609, 610, 611, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 612, 80, 193, 194,
	81, 613, 614, 195, 196, 197, 615, 198, 616, 384,
	617, 82, 83, 84, 0, 85, 618, 86, 87, 88,
	619, 385, 89, 90, 620, 621, 622, 623, 624, 625,
	91, 92, 93, 94, 199, 95, 200, 201, 626, 96,
	627, 97, 628, 629, 630, 98, 99, 631, 100, 632,
	0, 633, 202, 101, 102, 203, 634, 635, 636, 103,
	104, 204, 0, 105, 637, 106, 638, 639, 386, 205,
	640, 107, 206, 641, 207, 642, 108, 109, 208, 209,
	388, 643, 112, 644, 110, 645, 387, 111, 210, 211,
	212, 213, 646, 214, 647, 389, 113, 390, 114, 115,
	648, 649, 215, 391, 116, 392, 650, 117, 651, 652,
	118, 0, 119, 120, 121, 122, 123, 393, 124, 125,
	128, 126, 653, 127, 654, 216, 129, 217, 130, 131,
	655, 656, 657, 658, 659, 132, 218, 394, 133, 395,
	219, 134, 135, 136, 660, 220, 137, 221, 138, 661,
	139, 140, 141, 222, 142, 143, 662, 145, 146, 144,
	147, 663, 148, 396, 149, 150, 223, 151, 0, 152,
	153, 154, 664, 224, 155, 156, 665, 157, 158, 397,
	159, 225, 226, 160, 666, 166, 161, 162, 163, 165,
	227, 164, 228, 667, 167, 668, 168, 169, 669, 229,
	230, 231, 670, 671, 170, 232, 233, 672, 171, 172,
	173, 174, 673, 674, 175, 176, 177, 675, 676, 178,
	179, 180, 234, 235, 677, 678, 181, 679, 680, 681,
	682, 182, 183, 184, 185, 510, 499, 500, 497, 498,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 1149, 76, 0, 0, 0, 0, 526,
	492, 0, 0, 0, 77, 78, 187, 540, 189, 541,
	79, 542, 543, 0, 80, 193, 194, 81, 507, 525,
	544, 545, 197, 0, 536, 0, 518, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 385, 89,
	90, 0, 519, 521, 0, 520, 522, 91, 92, 93,
	94, 546, 95, 547, 548, 0, 96, 0, 97, 0,
	1150, 0, 539, 99, 0, 100, 0, 0, 0, 491,
	101, 102, 527, 505, 0, 0, 103, 104, 549, 0,
	105, 0, 106, 0, 0, 386, 205, 0, 107, 537,
	0, 207, 0, 108, 109, 533, 535, 388, 0, 112,
	0, 110, 0, 387, 111, 550, 551, 552, 553, 0,
	517, 0, 389, 113, 390, 114, 115, 0, 0, 538,
	391, 116, 392, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 393, 124, 125, 128, 126, 481,
	127, 506, 534, 129, 554, 130, 131, 0, 0, 0,
	0, 0, 132, 218, 394, 133, 395, 528, 134, 135,
	136, 0, 529, 137, 221, 138, 0, 139, 140, 141,
	555, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	396, 149, 150, 495, 151, 0, 152, 153, 154, 0,
	224, 155, 156, 523, 157, 158, 397, 159, 556, 226,
	160, 0, 166, 161, 162, 163, 165, 557, 164, 530,
	0, 167, 0, 168, 169, 0, 229, 558, 559, 0,
	0, 170, 531, 532, 504, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 524, 0, 178, 179, 180, 234,
	560, 1148, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 478, 479, 1151, 0, 0, 0, 480,
	0, 0, 487, 1146, 510, 499, 500, 497, 498, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 526, 492,
	0, 0, 0, 77, 78, 187, 540, 189, 541, 79,
	542, 543, 0, 80, 193, 194, 81, 507, 525, 544,
	545, 197, 0, 536, 0, 518, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 385, 89, 90,
	0, 519, 521, 0, 520, 522, 91, 92, 93, 94,
	546, 95, 547, 548, 575, 96, 0, 97, 0, 0,
	0, 539, 99, 0, 100, 0, 0, 0, 491, 101,
	102, 527, 505, 0, 0, 103, 104, 549, 0, 105,
	0, 106, 0, 0, 386, 205, 0, 107, 537, 0,
	207, 0, 108, 109, 533, 535, 388, 0, 112, 0,
	110, 0, 387, 111, 550, 551, 552, 553, 0, 517,
	0, 389, 113, 390, 114, 115, 0, 0, 538, 391,
	116, 392, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 393, 124, 125, 128, 126, 481, 127,
	506, 534, 129, 554, 130, 131, 0, 0, 0, 0,
	0, 132, 218, 394, 133, 395, 528, 134, 135, 136,
	0, 529, 137, 221, 138, 0, 139, 140, 141, 555,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 396,
	149, 150, 495, 151, 0, 152, 153, 154, 61, 224,
	155, 156, 523, 157, 158, 397, 159, 556, 226, 160,
	0, 166, 161, 162, 163, 165, 557, 164, 530, 0,
	167, 63, 168, 169, 0, 229, 558, 559, 0, 0,
	170, 531, 532, 504, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 524, 0, 178, 179, 180, 383, 560,
	0, 0, 181, 0, 0, 0, 59, 182, 183, 184,
	185, 482, 60, 510, 499, 500, 497, 498, 486, 0,
	0, 0, 478, 479, 0, 0, 0, 0, 480, 74,
	75, 487, 76, 0, 0, 0, 0, 526, 492, 0,
	0, 0, 77, 78, 187, 540, 189, 541, 79, 542,
	543, 0, 80, 193, 194, 81, 507, 525, 544, 545,
	197, 0, 536, 0, 518, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 385, 89, 90, 0,
	519, 521, 0, 520, 522, 91, 92, 93, 94, 546,
	95, 547, 548, 0, 96, 0, 97, 0, 0, 0,
	539, 99, 0, 100, 0, 0, 0, 491, 101, 102,
	527, 505, 0, 0, 103, 104, 549, 0, 105, 0,
	106, 0, 0, 386, 205, 0, 107, 537, 0, 207,
	0, 108, 109, 533, 535, 388, 0, 112, 0, 110,
	0, 387, 111, 550, 551, 552, 553, 0, 517, 0,
	389, 113, 390, 114, 115, 0, 0, 538, 391, 116,
	392, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 393, 124, 125, 128, 126, 481, 127, 506,
	534, 129, 554, 130, 131, 0, 0, 0, 0, 0,
	132, 218, 394, 133, 395, 528, 134, 135, 136, 0,
	529, 137, 221, 138, 0, 139, 140, 141, 555, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 396, 149,
	150, 495, 151, 0, 152, 153, 154, 61, 224, 155,
	156, 523, 157, 158, 397, 159, 556, 226, 160, 0,
	166, 161, 162, 163, 165, 557, 164, 530, 0, 167,
	63, 168, 169, 0, 229, 558, 559, 0, 0, 170,
	531, 532, 504, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 524, 0, 178, 179, 180, 383, 560, 0,
	0, 181, 0, 0, 0, 59, 182, 183, 184, 185,
	482, 60, 510, 499, 500, 497, 498, 486, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 480, 74, 75,
	487, 76, 0, 0, 0, 0, 526, 492, 0, 0,
	0, 77, 78, 187, 540, 189, 541, 79, 542, 543,
	1188, 80, 193, 194, 81, 507, 525, 544, 545, 197,
	0, 536, 0, 518, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 385, 89, 90, 0, 519,
	521, 0, 520, 522, 91, 92, 93, 94, 546, 95,
	547, 548, 0, 96, 0, 97, 0, 0, 0, 539,
	99, 0, 100, 0, 0, 0, 491, 101, 102, 527,
	505, 0, 0, 103, 104, 549, 0, 105, 0, 106,
	0, 1193, 386, 205, 0, 107, 537, 0, 207, 0,
	108, 109, 533, 535, 388, 0, 112, 0, 110, 0,
	387, 111, 550, 551, 552, 553, 0, 517, 0, 389,
	113, 390, 114, 115, 0, 1189, 538, 391, 116, 392,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 393, 124, 125, 128, 126, 481, 127, 506, 534,
	129, 554, 130, 131, 0, 0, 0, 0, 0, 132,
	218, 394, 133, 395, 528, 134, 135, 136, 0, 529,
	137, 221, 138, 0, 139, 140, 141, 555, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 396, 149, 150,
	495, 151, 0, 152, 153, 154, 0, 224, 155, 156,
	523, 157, 158, 397, 159, 556, 226, 160, 0, 166,
	161, 162, 163, 165, 557, 164, 530, 0, 167, 0,
	168, 169, 0, 229, 558, 559, 0, 1190, 170, 531,
	532, 504, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 524, 0, 178, 179, 180, 234, 560, 0, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 482,
	0, 510, 499, 500, 497, 498, 486, 0, 0, 0,
	478, 479, 0, 0, 0, 0, 480, 74, 75, 487,
	76, 0, 0, 0, 0, 526, 492, 0, 0, 0,
	77, 78, 187, 540, 189, 541, 79, 542, 543, 0,
	80, 193, 194, 81, 507, 525, 544, 545, 197, 0,
	536, 0, 518, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 385, 89, 90, 0, 519, 521,
	0, 520, 522, 91, 92, 93, 94, 546, 95, 547,
	548, 0, 96, 0, 97, 0, 0, 0, 539, 99,
	0, 100, 0, 0, 0, 491, 101, 102, 527, 505,
	0, 0, 103, 104, 549, 0, 105, 0, 106, 0,
	0, 386, 205, 0, 107, 537, 0, 207, 0, 108,
	109, 533, 535, 388, 0, 112, 0, 110, 0, 387,
	111, 550, 551, 552, 553, 0, 517, 0, 389, 113,
	390, 114, 115, 0, 0, 538, 391, 116, 392, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	393, 124, 125, 128, 126, 481, 127, 506, 534, 129,
	554, 130, 131, 0, 0, 0, 0, 0, 132, 218,
	394, 133, 395, 528, 134, 135, 136, 0, 529, 137,
	221, 138, 0, 139, 140, 141, 555, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 396, 149, 150, 495,
	151, 0, 152, 153, 154, 0, 224, 155, 156, 523,
	157, 158, 397, 159, 556, 226, 160, 0, 166, 161,
	162, 163, 165, 557, 164, 530, 0, 167, 0, 168,
	169, 0, 229, 558, 559, 0, 0, 170, 531, 532,
	504, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	524, 0, 178, 179, 180, 234, 560, 0, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 478,
	479, 0, 0, 0, 0, 480, 0, 0, 487, 1570,
	510, 499, 500, 497, 498, 486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 526, 492, 0, 0, 0, 77,
	78, 187, 540, 189, 541, 79, 542, 543, 0, 80,
	193, 194, 81, 507, 525, 544, 545, 197, 0, 536,
	0, 518, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 385, 89, 90, 0, 519, 521, 0,
	520, 522, 91, 92, 93, 94, 546, 95, 547, 548,
	0, 96, 0, 97, 0, 0, 0, 539, 99, 0,
	100, 0, 0, 0, 491, 101, 102, 527, 505, 0,
	0, 103, 104, 549, 0, 105, 0, 106, 0, 0,
	386, 205, 0, 107, 537, 0, 207, 0, 108, 109,
	533, 535, 388, 0, 112, 0, 110, 0, 387, 111,
	550, 551, 552, 553, 0, 517, 0, 389, 113, 390,
	114, 115, 0, 0, 538, 391, 116, 392, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 393,
	124, 125, 128, 126, 481, 127, 506, 534, 129, 554,
	130, 131, 0, 0, 0, 0, 0, 132, 218, 394,
	133, 395, 528, 134, 135, 136, 0, 529, 137, 221,
	138, 0, 139, 140, 141, 555, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 396, 149, 150, 495, 151,
	0, 152, 153, 154, 0, 224, 155, 156, 523, 157,
	158, 397, 159, 556, 226, 160, 0, 166, 161, 162,
	163, 165, 557, 164, 530, 0, 167, 0, 168, 169,
	0, 229, 558, 559, 0, 0, 170, 531, 532, 504,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 524,
	0, 178, 179, 180, 234, 560, 0, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 478, 479,
	0, 0, 0, 0, 480, 0, 0, 487, 1519, 510,
	499, 500, 497, 498, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 526, 492, 0, 0, 0, 77, 78,
	187, 540, 189, 541, 79, 542, 543, 0, 80, 193,
	194, 81, 507, 525, 544, 545, 197, 0, 536, 0,
	518, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 385, 89, 90, 0, 519, 521, 0, 520,
	522, 91, 92, 93, 94, 546, 95, 547, 548, 0,
	96, 0, 97, 0, 0, 0, 539, 99, 0, 100,
	0, 0, 0, 491, 101, 102, 527, 505, 0, 0,
	103, 104, 549, 0, 105, 0, 106, 0, 0, 386,
	205, 0, 107, 537, 0, 207, 0, 108, 109, 533,
	535, 388, 0, 112, 0, 110, 0, 387, 111, 550,
	551, 552, 553, 0, 517, 0, 389, 113, 390, 114,
	115, 0, 0, 538, 391, 116, 392, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 393, 124,
	125, 128, 126, 481, 127, 506, 534, 129, 554, 130,
	131, 0, 0, 0, 0, 0, 132, 218, 394, 133,
	395, 528, 134, 135, 136, 0, 529, 137, 221, 138,
	0, 139, 140, 141, 555, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 396, 149, 150, 495, 151, 0,
	152, 153, 154, 0, 224, 155, 156, 523, 157, 158,
	397, 159, 556, 226, 160, 0, 166, 161, 162, 163,
	165, 557, 164, 530, 0, 167, 0, 168, 169, 0,
	229, 558, 559, 0, 0, 170, 531, 532, 504, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 524, 0,
	178, 179, 180, 234, 560, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 480, 0, 0, 487, 1145, 510, 499,
	500, 497, 498, 486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 526, 492, 0, 0, 0, 77, 78, 187,
	540, 189, 541, 79, 542, 543, 0, 80, 193, 194,
	81, 507, 525, 544, 545, 197, 0, 536, 0, 518,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 385, 89, 90, 0, 519, 521, 0, 520, 522,
	91, 92, 93, 94, 546, 95, 547, 548, 0, 96,
	0, 97, 0, 0, 0, 539, 99, 0, 100, 0,
	0, 0, 491, 101, 102, 527, 505, 0, 0, 103,
	104, 549, 0, 105, 0, 106, 0, 0, 386, 205,
	0, 107, 537, 0, 207, 0, 108, 109, 533, 535,
	388, 0, 112, 0, 110, 0, 387, 111, 550, 551,
	552, 553, 0, 517, 0, 389, 113, 390, 114, 115,
	0, 0, 538, 391, 116, 392, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 393, 124, 125,
	128, 126, 481, 127, 506, 534, 129, 554, 130, 131,
	0, 0, 0, 0, 0, 132, 218, 394, 133, 395,
	528, 134, 135, 136, 0, 529, 137, 221, 138, 0,
	139, 140, 141, 555, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 396, 149, 150, 495, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 523, 157, 158, 397,
	159, 556, 226, 160, 0, 166, 161, 162, 163, 165,
	557, 164, 530, 0, 167, 0, 168, 169, 0, 229,
	558, 559, 0, 0, 170, 531, 532, 504, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 524, 0, 178,
	179, 180, 234, 560, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 482, 0, 0, 0, 0,
	510, 499, 500, 497, 498, 486, 478, 479, 0, 0,
	0, 0, 480, 897, 1142, 487, 74, 75, 0, 76,
	0, 0, 0, 0, 526, 492, 0, 0, 0, 77,
	78, 187, 540, 189, 541, 79, 542, 543, 0, 80,
	193, 194, 81, 507, 525, 544, 545, 197, 0, 536,
	0, 518, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 385, 89, 90, 0, 519, 521, 0,
	520, 522, 91, 92, 93, 94, 546, 95, 547, 548,
	0, 96, 0, 97, 0, 0, 0, 539, 99, 0,
	100, 0, 0, 0, 491, 101, 102, 527, 505, 0,
	0, 103, 104, 549, 0, 105, 0, 106, 0, 0,
	386, 205, 0, 107, 537, 0, 207, 0, 108, 109,
	533, 535, 388, 0, 112, 0, 110, 0, 387, 111,
	550, 551, 552, 553, 0, 517, 0, 389, 113, 390,
	114, 115, 0, 0, 538, 391, 116, 392, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 393,
	124, 125, 128, 126, 481, 127, 506, 534, 129, 554,
	130, 131, 0, 0, 0, 0, 0, 132, 218, 394,
	133, 395, 528, 134, 135, 136, 0, 529, 137, 221,
	138, 0, 139, 140, 141, 555, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 396, 149, 150, 495, 151,
	0, 152, 153, 154, 0, 224, 155, 156, 523, 157,
	158, 397, 159, 556, 226, 160, 0, 166, 161, 162,
	163, 165, 557, 164, 530, 0, 167, 0, 168, 169,
	0, 229, 558, 559, 0, 0, 170, 531, 532, 504,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 524,
	0, 178, 179, 180, 234, 560, 0, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 482, 0, 510,
	499, 500, 497, 498, 486, 0, 0, 0, 478, 479,
	476, 0, 0, 0, 480, 74, 75, 487, 76, 0,
	0, 0, 0, 526, 492, 0, 0, 0, 77, 78,
	187, 540, 189, 541, 79, 542, 543, 0, 80, 193,
	194, 81, 507, 525, 544, 545, 197, 0, 536, 0,
	518, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 385, 89, 90, 0, 519, 521, 0, 520,
	522, 91, 92, 93, 94, 546, 95, 547, 548, 0,
	96, 0, 97, 0, 0, 0, 539, 99, 0, 100,
	0, 0, 0, 491, 101, 102, 527, 505, 0, 0,
	103, 104, 549, 0, 105, 0, 106, 0, 0, 386,
	205, 0, 107, 537, 0, 207, 0, 108, 109, 533,
	535, 388, 0, 112, 0, 110, 0, 387, 111, 550,
	551, 552, 553, 0, 517, 0, 389, 113, 390, 114,
	115, 0, 0, 538, 391, 116, 392, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 393, 124,
	125, 128, 126, 481, 127, 506, 534, 129, 554, 130,
	131, 0, 0, 0, 0, 0, 132, 218, 394, 133,
	395, 528, 134, 135, 136, 0, 529, 137, 221, 138,
	0, 139, 140, 141, 555, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 396, 149, 150, 495, 151, 0,
	152, 153, 154, 0, 224, 155, 156, 523, 157, 158,
	397, 159, 556, 226, 160, 0, 166, 161, 162, 163,
	165, 557, 164, 530, 0, 167, 0, 168, 169, 0,
	229, 558, 559, 0, 0, 170, 531, 532, 504, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 524, 0,
	178, 179, 180, 234, 560, 1524, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 482, 0, 510, 499,
	500, 497, 498, 486, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 480, 74, 75, 487, 76, 0, 0,
	0, 0, 526, 492, 0, 0, 0, 77, 78, 187,
	540, 189, 541, 79, 542, 543, 0, 80, 193, 194,
	81, 507, 525, 544, 545, 197, 0, 536, 0, 518,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 385, 89, 90, 0, 519, 521, 0, 520, 522,
	91, 92, 93, 94, 546, 95, 547, 548, 575, 96,
	0, 97, 0, 0, 0, 539, 99, 0, 100, 0,
	0, 0, 491, 101, 102, 527, 505, 0, 0, 103,
	104, 549, 0, 105, 0, 106, 0, 0, 386, 205,
	0, 107, 537, 0, 207, 0, 108, 109, 533, 535,
	388, 0, 112, 0, 110, 0, 387, 111, 550, 551,
	552, 553, 0, 517, 0, 389, 113, 390, 114, 115,
	0, 0, 538, 391, 116, 392, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 393, 124, 125,
	128, 126, 481, 127, 506, 534, 129, 554, 130, 131,
	0, 0, 0, 0, 0, 132, 218, 394, 133, 395,
	528, 134, 135, 136, 0, 529, 137, 221, 138, 0,
	139, 140, 141, 555, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 396, 149, 150, 495, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 523, 157, 158, 397,
	159, 556, 226, 160, 0, 166, 161, 162, 163, 165,
	557, 164, 530, 0, 167, 0, 168, 169, 0, 229,
	558, 559, 0, 0, 170, 531, 532, 504, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 524, 0, 178,
	179, 180, 234, 560, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 482, 0, 510, 499, 500,
	497, 498, 486, 0, 0, 0, 478, 479, 0, 0,
	0, 0, 480, 74, 75, 487, 76, 0, 0, 0,
	0, 526, 492, 0, 0, 0, 77, 78, 187, 540,
	189, 541, 79, 542, 543, 0, 80, 193, 194, 81,
	507, 525, 544, 545, 197, 0, 536, 0, 518, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	385, 89, 90, 0, 519, 521, 0, 520, 522, 91,
	92, 93, 94, 546, 95, 547, 548, 0, 96, 0,
	97, 0, 0, 0, 539, 99, 0, 100, 0, 0,
	0, 491, 101, 102, 527, 505, 0, 0, 103, 104,
	549, 0, 105, 0, 106, 0, 1193, 386, 205, 0,
	107, 537, 0, 207, 0, 108, 109, 533, 535, 388,
	0, 112, 0, 110, 0, 387, 111, 550, 551, 552,
	553, 0, 517, 0, 389, 113, 390, 114, 115, 0,
	0, 538, 391, 116, 392, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 393, 124, 125, 128,
	126, 481, 127, 506, 534, 129, 554, 130, 131, 0,
	0, 0, 0, 0, 132, 218, 394, 133, 395, 528,
	134, 135, 136, 0, 529, 137, 221, 138, 0, 139,
	140, 141, 555, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 396, 149, 150, 495, 151, 0, 152, 153,
	154, 0, 224, 155, 156, 523, 157, 158, 397, 159,
	556, 226, 160, 0, 166, 161, 162, 163, 165, 557,
	164, 530, 0, 167, 0, 168, 169, 0, 229, 558,
	559, 0, 0, 170, 531, 532, 504, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 524, 0, 178, 179,
	180, 234, 560, 0, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 482, 0, 0, 0, 0, 510,
	499, 500, 497, 498, 486, 478, 479, 0, 0, 0,
	0, 480, 0, 0, 487, 74, 75, 831, 76, 0,
	0, 0, 0, 526, 492, 0, 0, 0, 77, 78,
	187, 540, 189, 541, 79, 542, 543, 0, 80, 193,
	194, 81, 507, 525, 544, 545, 197, 0, 536, 0,
	518, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 385, 89, 90, 0, 519, 521, 0, 520,
	522, 91, 92, 93, 94, 546, 95, 547, 548, 0,
	96, 0, 97, 0, 0, 0, 539, 99, 0, 100,
	0, 0, 0, 491, 101, 102, 527, 505, 0, 0,
	103, 104, 549, 0, 105, 0, 106, 0, 0, 386,
	205, 0, 107, 537, 0, 207, 0, 108, 109, 533,
	535, 388, 0, 112, 0, 110, 0, 387, 111, 550,
	551, 552, 553, 0, 517, 0, 389, 113, 390, 114,
	115, 0, 0, 538, 391, 116, 392, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 393, 124,
	125, 128, 126, 481, 127, 506, 534, 129, 554, 130,
	131, 0, 0, 0, 0, 0, 132, 218, 394, 133,
	395, 528, 134, 135, 136, 0, 529, 137, 221, 138,
	0, 139, 140, 141, 555, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 396, 149, 150, 495, 151, 0,
	152, 153, 154, 0, 224, 155, 156, 523, 157, 158,
	397, 159, 556, 226, 160, 0, 166, 161, 162, 163,
	165, 557, 164, 530, 0, 167, 0, 168, 169, 0,
	229, 558, 559, 0, 0, 170, 531, 532, 504, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 524, 0,
	178, 179, 180, 234, 560, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 482, 0, 510, 499,
	500, 497, 498, 486, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 480, 74, 75, 487, 76, 0, 0,
	0, 0, 526, 492, 0, 0, 0, 77, 78, 187,
	540, 189, 541, 79, 542, 543, 0, 80, 193, 194,
	81, 507, 525, 544, 545, 197, 0, 536, 0, 518,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 385, 89, 1865, 0, 519, 521, 0, 520, 522,
	91, 92, 93, 94, 546, 95, 547, 548, 0, 96,
	0, 97, 0, 0, 0, 539, 99, 0, 100, 0,
	0, 0, 491, 101, 102, 527, 505, 0, 0, 103,
	104, 549, 0, 105, 0, 106, 0, 0, 386, 205,
	0, 107, 537, 0, 207, 0, 108, 109, 533, 535,
	388, 0, 112, 0, 110, 0, 387, 111, 550, 551,
	552, 553, 0, 517, 0, 389, 113, 390, 114, 115,
	0, 0, 538, 391, 116, 392, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 393, 124, 125,
	128, 126, 481, 127, 506, 534, 129, 554, 130, 131,
	0, 0, 0, 0, 0, 132, 218, 394, 133, 395,
	528, 134, 135, 136, 0, 529, 137, 221, 138, 0,
	139, 140, 141, 555, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 396, 149, 150, 495, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 523, 157, 158, 397,
	159, 556, 226, 160, 0, 166, 161, 162, 163, 165,
	557, 164, 530, 0, 167, 0, 168, 169, 0, 229,
	558, 559, 0, 0, 170, 531, 532, 504, 171, 172,
	1864, 174, 0, 0, 175, 176, 177, 524, 0, 178,
	179, 180, 234, 560, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 482, 0, 510, 499, 500,
	497, 498, 486, 0, 0, 0, 478, 479, 0, 0,
	0, 0, 480, 74, 75, 487, 76, 0, 0, 0,
	0, 526, 492, 0, 0, 0, 77, 78, 1863, 540,
	189, 541, 79, 542, 543, 0, 80, 193, 194, 81,
	507, 525, 544, 545, 197, 0, 536, 0, 518, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	385, 89, 1865, 0, 519, 521, 0, 520, 522, 91,
	92, 93, 94, 546, 95, 547, 548, 0, 96, 0,
	97, 0, 0, 0, 539, 99, 0, 100, 0, 0,
	0, 491, 101, 102, 527, 505, 0, 0, 103, 104,
	549, 0, 105, 0, 106, 0, 0, 386, 205, 0,
	107, 537, 0, 207, 0, 108, 109, 533, 535, 388,
	0, 112, 0, 110, 0, 387, 111, 550, 551, 552,
	553, 0, 517, 0, 389, 113, 390, 114, 115, 0,
	0, 538, 391, 116, 392, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 393, 124, 125, 128,
	126, 481, 127, 506, 534, 129, 554, 130, 131, 0,
	0, 0, 0, 0, 132, 218, 394, 133, 395, 528,
	134, 135, 136, 0, 529, 137, 221, 138, 0, 139,
	140, 141, 555, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 396, 149, 150, 495, 151, 0, 152, 153,
	154, 0, 224, 155, 156, 523, 157, 158, 397, 159,
	556, 226, 160, 0, 166, 161, 162, 163, 165, 557,
	164, 530, 0, 167, 0, 168, 169, 0, 229, 558,
	559, 0, 0, 170, 531, 532, 504, 171, 172, 1864,
	174, 0, 0, 175, 176, 177, 524, 0, 178, 179,
	180, 234, 560, 0, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 482, 0, 510, 499, 500, 497,
	498, 486, 0, 0, 0, 478, 479, 0, 0, 0,
	0, 480, 74, 75, 487, 76, 0, 0, 0, 0,
	526, 492, 0, 0, 0, 77, 78, 187, 540, 189,
	541, 79, 542, 543, 0, 80, 193, 194, 81, 507,
	525, 544, 545, 197, 0, 536, 0, 518, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 385,
	89, 90, 0, 519, 521, 0, 520, 522, 91, 92,
	93, 94, 546, 95, 547, 548, 0, 96, 0, 97,
	0, 0, 0, 539, 99, 0, 100, 0, 0, 0,
	491, 101, 102, 527, 505, 0, 0, 103, 104, 549,
	0, 105, 0, 106, 0, 0, 386, 205, 0, 107,
	537, 0, 207, 0, 108, 109, 533, 535, 388, 0,
	112, 0, 110, 0, 387, 111, 550, 551, 552, 553,
	0, 517, 0, 389, 113, 390, 114, 115, 0, 0,
	538, 391, 116, 392, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 393, 124, 125, 128, 126,
	481, 127, 506, 534, 129, 554, 130, 131, 0, 0,
	0, 0, 0, 132, 218, 394, 133, 395, 528, 134,
	135, 136, 0, 529, 137, 221, 138, 0, 139, 140,
	141, 555, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 396, 149, 150, 495, 151, 0, 152, 153, 154,
	0, 224, 155, 156, 523, 157, 158, 397, 159, 556,
	226, 160, 0, 166, 161, 162, 163, 165, 557, 164,
	530, 0, 167, 0, 168, 169, 0, 229, 558, 559,
	0, 0, 170, 531, 532, 504, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 524, 0, 178, 179, 180,
	234, 560, 0, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 482, 0, 510, 499, 500, 497, 498,
	486, 0, 0, 0, 478, 479, 0, 0, 0, 0,
	480, 74, 75, 487, 76, 0, 0, 0, 0, 526,
	492, 0, 0, 0, 77, 78, 187, 540, 189, 541,
	79, 542, 543, 0, 80, 193, 194, 81, 507, 525,
	544, 545, 197, 0, 536, 0, 518, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 385, 89,
	90, 0, 519, 521, 0, 520, 522, 91, 92, 93,
	94, 546, 95, 547, 548, 0, 96, 0, 97, 0,
	0, 0, 539, 99, 0, 100, 0, 0, 0, 491,
	101, 102, 527, 505, 0, 0, 103, 104, 549, 0,
	105, 0, 106, 0, 0, 386, 205, 0, 107, 537,
	0, 207, 0, 108, 109, 533, 535, 388, 0, 112,
	0, 110, 0, 387, 111, 550, 551, 552, 553, 0,
	517, 0, 389, 113, 390, 114, 115, 0, 0, 538,
	391, 116, 392, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 393, 124, 125, 128, 126, 0,
	127, 506, 534, 129, 554, 130, 131, 0, 0, 0,
	0, 0, 132, 218, 394, 133, 395, 528, 134, 135,
	136, 0, 529, 137, 221, 138, 0, 139, 140, 141,
	555, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	396, 149, 150, 1183, 151, 0, 152, 153, 154, 0,
	224, 155, 156, 523, 157, 158, 397, 159, 556, 226,
	160, 0, 166, 161, 162, 163, 165, 557, 164, 530,
	0, 167, 0, 168, 169, 0, 229, 558, 559, 0,
	0, 170, 531, 532, 504, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 524, 0, 178, 179, 180, 234,
	560, 0, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 0, 0, 510, 499, 500, 497, 498, 486,
	0, 0, 0, 1179, 1180, 0, 0, 0, 0, 1181,
	74, 75, 1182, 76, 0, 0, 0, 0, 526, 492,
	0, 0, 0, 77, 78, 0, 540, 189, 541, 79,
	542, 543, 0, 80, 193, 194, 81, 507, 525, 544,
	545, 197, 0, 536, 0, 518, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 385, 89, 1865,
	0, 519, 521, 0, 520, 522, 91, 92, 93, 94,
	546, 95, 547, 548, 0, 96, 0, 97, 0, 0,
	0, 539, 99, 0, 100, 0, 0, 0, 491, 101,
	102, 527, 505, 0, 0, 103, 104, 549, 0, 105,
	0, 106, 0, 0, 386, 205, 0, 107, 537, 0,
	207, 0, 108, 109, 533, 535, 0, 0, 112, 0,
	110, 0, 387, 111, 550, 551, 552, 553, 0, 517,
	0, 0, 113, 390, 114, 115, 0, 0, 538, 391,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 393, 124, 125, 128, 126, 481, 127,
	506, 534, 129, 554, 130, 131, 0, 0, 0, 0,
	0, 132, 218, 394, 133, 395, 528, 134, 135, 136,
	0, 529, 137, 221, 138, 0, 139, 140, 141, 555,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 396,
	149, 150, 495, 151, 0, 152, 153, 154, 0, 224,
	155, 156, 523, 157, 158, 0, 159, 556, 226, 160,
	0, 166, 161, 162, 163, 165, 557, 164, 530, 0,
	167, 0, 168, 169, 0, 229, 558, 559, 0, 0,
	170, 531, 532, 504, 171, 172, 1864, 174, 0, 0,
	175, 176, 177, 524, 0, 178, 179, 180, 234, 560,
	0, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 478, 479, 0, 0, 0, 0, 480, 74,
	75, 487, 76, 0, 0, 0, 0, 526, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 525, 195, 196,
	197, 0, 536, 0, 518, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 385, 89, 90, 0,
	519, 521, 0, 520, 522, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	527, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 386, 205, 0, 107, 537, 0, 207,
	0, 108, 109, 533, 535, 388, 0, 112, 0, 110,
	0, 387, 111, 210, 211, 212, 213, 0, 214, 0,
	389, 113, 390, 114, 115, 0, 0, 538, 391, 116,
	392, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 393, 124, 125, 128, 126, 0, 127, 0,
	534, 129, 217, 130, 131, 0, 0, 0, 0, 0,
	132, 218, 394, 133, 395, 528, 134, 135, 136, 0,
	529, 137, 221, 138, 0, 139, 140, 141, 222, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 396, 149,
	150, 223, 151, 0, 152, 153, 154, 0, 224, 155,
	156, 523, 157, 158, 397, 159, 225, 226, 160, 0,
	166, 161, 162, 163, 165, 227, 164, 530, 0, 167,
	0, 168, 169, 0, 229, 230, 231, 0, 0, 170,
	531, 532, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 524, 0, 178, 179, 180, 234, 235, 0,
	0, 181, 379, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	1636, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 384, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 385, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 386, 205, 0, 107, 206, 0, 207, 0,
	108, 109, 208, 209, 388, 0, 112, 0, 110, 0,
	387, 111, 210, 211, 212, 213, 0, 214, 0, 389,
	113, 390, 114, 115, 0, 0, 215, 391, 116, 392,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 393, 124, 125, 128, 126, 0, 127, 0, 216,
	129, 217, 130, 131, 0, 0, 0, 0, 0, 132,
	218, 394, 133, 395, 219, 134, 135, 136, 0, 220,
	137, 221, 138, 0, 139, 140, 141, 222, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 396, 149, 150,
	223, 151, 0, 152, 153, 154, 61, 224, 155, 156,
	0, 157, 158, 397, 159, 225, 226, 160, 0, 166,
	161, 162, 163, 165, 227, 164, 228, 0, 167, 63,
	168, 169, 0, 229, 230, 231, 0, 0, 170, 232,
	233, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 383, 235, 0, 0,
	181, 0, 0, 0, 59, 182, 183, 184, 185, 0,
	60, 379, 783, 0, 784, 779, 774, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 75, 58,
	76, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 0,
	80, 193, 194, 81, 0, 0, 195, 196, 197, 0,
	198, 0, 384, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 385, 89, 90, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 94, 199, 95, 200,
	201, 787, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 202, 101, 102, 203, 776,
	0, 0, 103, 104, 204, 0, 105, 0, 106, 0,
	0, 386, 205, 0, 107, 206, 0, 207, 0, 108,
	109, 208, 209, 388, 0, 112, 0, 110, 0, 387,
	111, 210, 211, 212, 213, 0, 214, 0, 389, 113,
	390, 114, 115, 0, 0, 215, 391, 116, 392, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	393, 124, 125, 128, 126, 0, 127, 0, 216, 129,
	217, 130, 131, 0, 777, 0, 0, 0, 132, 218,
	394, 133, 395, 219, 134, 135, 136, 0, 220, 137,
	221, 138, 0, 139, 140, 141, 222, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 396, 149, 150, 223,
	151, 0, 152, 153, 154, 0, 224, 155, 156, 0,
	157, 158, 397, 159, 225, 226, 160, 0, 166, 161,
	162, 163, 165, 227, 164, 228, 0, 167, 0, 168,
	169, 0, 229, 230, 231, 0, 0, 170, 232, 233,
	775, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 234, 235, 379, 783, 181,
	784, 779, 774, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 785,
	780, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 384, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	385, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 770, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 776, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 386, 205, 0,
	107, 206, 0, 207, 0, 108, 109, 208, 209, 388,
	0, 112, 0, 110, 0, 387, 111, 210, 211, 212,
	213, 0, 214, 0, 389, 113, 390, 114, 115, 0,
	0, 215, 391, 116, 392, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 393, 124, 125, 128,
	126, 0, 127, 0, 216, 129, 217, 130, 131, 0,
	777, 0, 0, 0, 132, 218, 394, 133, 395, 219,
	134, 135, 136, 0, 220, 137, 221, 138, 0, 139,
	140, 141, 222, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 396, 149, 150, 223, 151, 0, 152, 153,
	154, 0, 224, 155, 156, 0, 157, 158, 397, 159,
	225, 226, 160, 0, 166, 161, 162, 163, 165, 227,
	164, 228, 0, 167, 0, 168, 169, 0, 229, 230,
	231, 0, 0, 170, 232, 233, 775, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 234, 235, 379, 783, 181, 784, 779, 774, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 785, 780, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 384, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 385, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 776, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 386, 205, 0, 107, 206, 0, 207,
	0, 108, 109, 208, 209, 388, 0, 112, 0, 110,
	0, 387, 111, 210, 211, 212, 213, 0, 214, 0,
	389, 113, 390, 114, 115, 0, 0, 215, 391, 116,
	392, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 393, 124, 125, 128, 126, 0, 127, 0,
	216, 129, 217, 130, 131, 0, 777, 0, 0, 0,
	132, 218, 394, 133, 395, 219, 134, 135, 136, 0,
	220, 137, 221, 138, 0, 139, 140, 141, 222, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 396, 149,
	150, 223, 151, 0, 152, 153, 154, 0, 224, 155,
	156, 0, 157, 158, 397, 159, 225, 226, 160, 0,
	166, 161, 162, 163, 165, 227, 164, 228, 0, 167,
	0, 168, 169, 0, 229, 230, 231, 0, 0, 170,
	232, 233, 775, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 234, 235, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 785, 780, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	205, 0, 107, 206, 0, 207, 0, 108, 109, 208,
	209, 0, 0, 112, 0, 110, 0, 0, 111, 210,
	211, 212, 213, 0, 214, 0, 0, 113, 0, 114,
	115, 0, 0, 215, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 216, 129, 217, 130,
	131, 0, 0, 0, 0, 0, 132, 218, 0, 133,
	0, 219, 134, 135, 136, 0, 220, 137, 221, 138,
	0, 139, 140, 141, 222, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 223, 151, 0,
	152, 153, 154, 61, 224, 155, 156, 0, 157, 158,
	0, 159, 225, 226, 160, 0, 166, 161, 162, 163,
	165, 227, 164, 228, 0, 167, 63, 168, 169, 0,
	229, 230, 231, 0, 0, 170, 232, 233, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 383, 235, 0, 0, 181, 71, 0,
	0, 59, 182, 183, 184, 185, 0, 60, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 1315, 0, 58, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 205,
	0, 107, 206, 0, 207, 0, 108, 109, 208, 209,
	0, 0, 112, 0, 110, 0, 0, 111, 210, 211,
	212, 213, 0, 214, 0, 0, 113, 0, 114, 115,
	0, 0, 215, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 216, 129, 217, 130, 131,
	0, 0, 0, 0, 0, 132, 218, 0, 133, 0,
	219, 134, 135, 136, 0, 220, 137, 221, 138, 0,
	139, 140, 141, 222, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 223, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 0, 157, 158, 0,
	159, 225, 226, 160, 0, 166, 161, 162, 163, 165,
	227, 164, 228, 0, 167, 0, 168, 169, 0, 229,
	230, 231, 0, 0, 170, 232, 233, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 234, 235, 0, 0, 181, 0, 71, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 468, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 205,
	0, 107, 206, 0, 207, 0, 108, 109, 208, 209,
	0, 0, 112, 0, 110, 0, 0, 111, 210, 211,
	212, 213, 0, 214, 0, 0, 113, 0, 114, 115,
	0, 0, 215, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 216, 129, 217, 130, 131,
	0, 0, 342, 0, 0, 132, 218, 0, 133, 0,
	219, 134, 135, 136, 0, 220, 137, 221, 138, 0,
	139, 140, 141, 222, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 223, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 0, 157, 158, 0,
	159, 225, 226, 160, 0, 166, 161, 162, 163, 165,
	227, 164, 228, 0, 167, 0, 168, 169, 0, 229,
	230, 231, 0, 0, 170, 232, 233, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 234, 235, 0, 0, 181, 71, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 1083, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 205, 0,
	107, 206, 0, 207, 0, 108, 109, 208, 209, 0,
	0, 112, 0, 110, 0, 0, 111, 210, 211, 212,
	213, 0, 214, 0, 0, 113, 0, 114, 115, 0,
	0, 215, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 216, 129, 217, 130, 131, 0,
	0, 0, 0, 0, 132, 218, 0, 133, 0, 219,
	134, 135, 136, 0, 220, 137, 221, 138, 0, 139,
	140, 141, 222, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 223, 151, 0, 152, 153,
	154, 0, 224, 155, 156, 0, 157, 158, 0, 159,
	225, 226, 160, 0, 166, 161, 162, 163, 165, 227,
	164, 228, 0, 167, 0, 168, 169, 0, 229, 230,
	231, 0, 0, 170, 232, 233, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 234, 235, 0, 0, 181, 0, 71, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 591, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 205, 0,
	107, 206, 0, 207, 0, 108, 109, 208, 209, 0,
	0, 112, 0, 110, 0, 0, 111, 210, 211, 212,
	213, 0, 214, 0, 0, 113, 0, 114, 115, 0,
	0, 215, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 216, 129, 217, 130, 131, 0,
	0, 0, 0, 0, 132, 218, 0, 133, 0, 219,
	134, 135, 136, 0, 220, 137, 221, 138, 0, 139,
	140, 141, 222, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 223, 151, 0, 152, 153,
	154, 0, 224, 155, 156, 0, 157, 158, 0, 159,
	225, 226, 160, 0, 166, 161, 162, 163, 165, 227,
	164, 228, 0, 167, 0, 168, 169, 0, 229, 230,
	231, 0, 0, 170, 232, 233, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 234, 235, 0, 0, 181, 71, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	186, 0, 0, 0, 989, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 0, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 0, 205, 0, 107,
	206, 0, 207, 0, 108, 109, 208, 209, 0, 0,
	112, 0, 110, 0, 0, 111, 210, 211, 212, 213,
	0, 214, 0, 0, 113, 0, 114, 115, 0, 0,
	215, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 216, 129, 217, 130, 131, 0, 0,
	0, 0, 0, 132, 218, 0, 133, 0, 219, 134,
	135, 136, 0, 220, 137, 221, 138, 0, 139, 140,
	141, 222, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 223, 151, 0, 152, 153, 154,
	0, 224, 155, 156, 0, 157, 158, 0, 159, 225,
	226, 160, 0, 166, 161, 162, 163, 165, 227, 164,
	228, 0, 167, 0, 168, 169, 0, 229, 230, 231,
	0, 0, 170, 232, 233, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	234, 235, 0, 0, 181, 71, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 1534, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 205, 0, 107, 206,
	0, 207, 0, 108, 109, 208, 209, 0, 0, 112,
	0, 110, 0, 0, 111, 210, 211, 212, 213, 0,
	214, 0, 0, 113, 0, 114, 115, 0, 0, 215,
	0, 116, 0, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 0, 124, 125, 128, 126, 0,
	127, 0, 216, 129, 217, 130, 131, 0, 0, 0,
	0, 0, 132, 218, 0, 133, 0, 219, 134, 135,
	136, 0, 220, 137, 221, 138, 0, 139, 140, 141,
	222, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	0, 149, 150, 223, 151, 0, 152, 153, 154, 0,
	224, 155, 156, 0, 157, 158, 0, 159, 225, 226,
	160, 0, 166, 161, 162, 163, 165, 227, 164, 228,
	0, 167, 0, 168, 169, 0, 229, 230, 231, 0,
	0, 170, 232, 233, 0, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 0, 0, 178, 179, 180, 234,
	235, 0, 0, 181, 71, 0, 0, 0, 182, 183,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 571, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 754, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 205, 0, 107, 206, 0,
	207, 0, 108, 109, 208, 209, 0, 0, 112, 0,
	110, 0, 0, 111, 210, 211, 212, 213, 0, 214,
	0, 0, 113, 0, 114, 115, 0, 0, 215, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 216, 129, 217, 130, 131, 0, 0, 0, 0,
	0, 132, 218, 0, 133, 0, 219, 134, 135, 136,
	0, 220, 137, 221, 138, 0, 139, 140, 141, 222,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 223, 151, 0, 152, 153, 154, 0, 224,
	155, 156, 0, 157, 158, 0, 159, 225, 226, 160,
	0, 166, 161, 162, 163, 165, 227, 164, 228, 0,
	167, 753, 168, 169, 0, 229, 230, 231, 0, 0,
	170, 232, 233, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 234, 235,
	0, 71, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 0, 757, 186, 0, 0, 0, 0,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 0,
	80, 193, 194, 81, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 0, 89, 90, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 94, 199, 95, 200,
	201, 0, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 202, 101, 102, 203, 0,
	0, 0, 103, 104, 204, 0, 105, 0, 106, 0,
	0, 0, 205, 0, 107, 206, 0, 207, 0, 108,
	109, 208, 209, 0, 0, 112, 0, 110, 0, 0,
	111, 210, 211, 212, 213, 0, 214, 0, 0, 113,
	0, 114, 115, 0, 0, 215, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 216, 129,
	217, 130, 131, 0, 0, 0, 0, 0, 132, 218,
	0, 133, 0, 219, 134, 135, 136, 0, 220, 137,
	221, 138, 0, 139, 140, 141, 222, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 223,
	151, 0, 152, 153, 154, 0, 224, 155, 156, 0,
	157, 158, 0, 159, 225, 226, 160, 0, 166, 161,
	162, 163, 165, 227, 164, 228, 0, 167, 0, 168,
	169, 0, 229, 230, 231, 0, 0, 170, 232, 233,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 234, 235, 0, 379, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 757, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 384,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 385, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 386, 205,
	0, 107, 206, 0, 207, 0, 108, 109, 208, 209,
	388, 0, 112, 0, 110, 0, 387, 111, 210, 211,
	212, 213, 0, 214, 0, 389, 113, 390, 114, 115,
	0, 0, 215, 391, 116, 392, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 393, 124, 125,
	128, 126, 0, 127, 0, 216, 129, 217, 130, 131,
	0, 0, 0, 0, 0, 132, 218, 394, 133, 395,
	219, 134, 135, 136, 0, 220, 137, 221, 138, 0,
	139, 140, 141, 222, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 396, 149, 150, 223, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 0, 157, 158, 397,
	159, 225, 226, 160, 0, 166, 161, 162, 163, 165,
	227, 164, 228, 0, 167, 0, 168, 169, 0, 229,
	230, 231, 0, 0, 170, 232, 233, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 234, 235, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 955, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 953, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 1058, 0, 103, 104, 204, 0, 105,
	0, 106, 958, 0, 0, 205, 0, 107, 206, 0,
	207, 0, 108, 109, 208, 209, 0, 0, 112, 1056,
	110, 0, 0, 111, 210, 211, 212, 213, 0, 214,
	0, 0, 113, 0, 114, 115, 0, 0, 215, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 216, 129, 217, 130, 131, 0, 0, 0, 0,
	0, 132, 218, 0, 133, 0, 219, 134, 135, 136,
	0, 220, 137, 221, 138, 957, 139, 140, 141, 222,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 223, 151, 0, 152, 153, 154, 0, 224,
	155, 156, 0, 157, 158, 0, 159, 225, 226, 160,
	0, 166, 161, 162, 163, 165, 227, 164, 228, 0,
	167, 0, 168, 169, 0, 229, 230, 231, 0, 0,
	170, 232, 233, 0, 171, 172, 173, 174, 0, 1057,
	175, 176, 177, 0, 0, 178, 179, 180, 234, 235,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 955, 198,
	0, 0, 950, 82, 83, 84, 0, 85, 953, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 958, 0,
	0, 205, 0, 107, 206, 0, 207, 0, 108, 109,
	949, 209, 0, 0, 112, 0, 110, 0, 0, 111,
	210, 211, 212, 213, 0, 214, 0, 0, 113, 0,
	114, 115, 0, 0, 215, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 216, 129, 217,
	130, 131, 0, 0, 0, 0, 0, 132, 218, 0,
	133, 0, 219, 134, 135, 136, 0, 220, 137, 221,
	138, 957, 139, 140, 141, 222, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 223, 151,
	0, 152, 153, 154, 0, 224, 155, 156, 0, 157,
	158, 0, 159, 225, 226, 160, 0, 166, 161, 162,
	163, 165, 227, 164, 228, 0, 167, 0, 168, 169,
	0, 229, 230, 231, 0, 0, 170, 232, 233, 0,
	171, 172, 173, 174, 0, 956, 175, 176, 177, 0,
	0, 178, 179, 180, 234, 235, 71, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	186, 0, 1315, 0, 0, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 0, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 0, 205, 0, 107,
	206, 0, 207, 0, 108, 109, 208, 209, 0, 0,
	112, 0, 110, 0, 0, 111, 210, 211, 212, 213,
	0, 214, 0, 0, 113, 0, 114, 115, 0, 0,
	215, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 216, 129, 217, 130, 131, 0, 0,
	0, 0, 0, 132, 218, 0, 133, 0, 219, 134,
	135, 136, 0, 220, 137, 221, 138, 0, 139, 140,
	141, 222, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 223, 151, 0, 152, 153, 154,
	0, 224, 155, 156, 0, 157, 158, 0, 159, 225,
	226, 160, 0, 166, 161, 162, 163, 165, 227, 164,
	228, 0, 167, 0, 168, 169, 0, 229, 230, 231,
	0, 0, 170, 232, 233, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	234, 235, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 205, 0, 107, 206, 0, 207, 0,
	108, 109, 208, 209, 0, 0, 112, 0, 110, 0,
	0, 111, 210, 211, 212, 213, 0, 214, 0, 0,
	113, 0, 114, 115, 0, 0, 215, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 216,
	129, 217, 130, 131, 0, 0, 342, 0, 0, 132,
	218, 0, 133, 0, 219, 134, 135, 136, 0, 220,
	137, 221, 138, 0, 139, 140, 141, 222, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	223, 151, 0, 152, 153, 154, 0, 224, 155, 156,
	0, 157, 158, 0, 159, 225, 226, 160, 0, 166,
	161, 162, 163, 165, 227, 164, 228, 0, 167, 0,
	168, 169, 0, 229, 230, 231, 0, 0, 170, 232,
	233, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 234, 235, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 205,
	0, 107, 206, 0, 207, 0, 108, 109, 704, 209,
	0, 0, 112, 0, 110, 0, 0, 111, 210, 211,
	212, 213, 0, 214, 0, 0, 113, 0, 114, 115,
	0, 0, 215, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 216, 129, 217, 130, 131,
	0, 0, 342, 0, 0, 132, 218, 0, 133, 0,
	219, 134, 135, 136, 0, 220, 137, 221, 138, 0,
	139, 140, 141, 222, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 223, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 0, 157, 158, 0,
	159, 225, 226, 160, 0, 166, 161, 162, 163, 165,
	227, 164, 228, 0, 167, 0, 168, 169, 0, 229,
	230, 231, 0, 0, 170, 232, 233, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 234, 235, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 404, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 205, 0, 107, 206, 0,
	207, 0, 108, 109, 208, 209, 0, 0, 112, 0,
	110, 0, 0, 111, 210, 211, 212, 213, 0, 214,
	0, 0, 113, 0, 114, 115, 0, 0, 215, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 216, 129, 217, 130, 131, 0, 0, 0, 0,
	0, 132, 218, 0, 133, 0, 219, 134, 135, 136,
	0, 220, 137, 221, 138, 0, 139, 140, 141, 222,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 223, 151, 0, 152, 153, 154, 0, 224,
	155, 156, 0, 157, 158, 0, 159, 225, 226, 160,
	0, 166, 161, 162, 163, 165, 227, 164, 228, 0,
	167, 0, 168, 169, 0, 229, 230, 231, 0, 0,
	170, 232, 233, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 234, 235,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 205, 0, 107, 206, 0, 207, 0, 108, 109,
	347, 209, 0, 0, 112, 0, 110, 0, 0, 111,
	210, 211, 212, 213, 0, 214, 0, 0, 113, 0,
	114, 115, 0, 0, 215, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 216, 129, 217,
	130, 131, 0, 0, 342, 0, 0, 132, 218, 0,
	133, 0, 219, 134, 135, 136, 0, 220, 137, 221,
	138, 0, 139, 140, 141, 222, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 223, 151,
	0, 152, 153, 154, 0, 224, 155, 156, 0, 157,
	158, 0, 159, 225, 226, 160, 0, 166, 161, 162,
	163, 165, 227, 164, 228, 0, 167, 0, 168, 169,
	0, 229, 230, 231, 0, 0, 170, 232, 233, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 234, 235, 71, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 74, 75, 259, 76, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 0, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 0, 205, 0, 107,
	206, 0, 207, 0, 108, 109, 208, 209, 0, 0,
	112, 0, 110, 0, 0, 111, 210, 211, 212, 213,
	0, 214, 0, 0, 113, 0, 114, 115, 0, 0,
	215, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 216, 129, 217, 130, 131, 0, 0,
	0, 0, 0, 132, 218, 0, 133, 0, 219, 134,
	135, 136, 0, 220, 137, 221, 258, 0, 139, 140,
	141, 222, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 223, 151, 0, 152, 153, 154,
	0, 224, 155, 156, 0, 157, 158, 0, 159, 225,
	226, 160, 0, 166, 161, 162, 163, 165, 227, 164,
	228, 0, 167, 0, 168, 169, 0, 229, 230, 231,
	0, 0, 170, 232, 233, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	234, 235, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 205, 0, 107, 206, 0, 207, 0,
	108, 109, 208, 209, 0, 0, 112, 0, 110, 0,
	0, 111, 210, 211, 212, 213, 0, 214, 0, 0,
	113, 0, 114, 115, 0, 0, 215, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 216,
	129, 217, 130, 131, 0, 0, 0, 0, 0, 132,
	218, 0, 133, 0, 219, 134, 135, 136, 0, 220,
	137, 221, 138, 0, 139, 140, 141, 222, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	223, 151, 0, 152, 153, 154, 0, 224, 155, 156,
	0, 157, 158, 0, 159, 225, 226, 160, 0, 166,
	161, 162, 163, 165, 227, 164, 228, 0, 167, 0,
	168, 169, 0, 229, 230, 231, 0, 0, 170, 232,
	233, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 234, 235, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 205,
	0, 107, 206, 0, 207, 0, 108, 109, 1229, 209,
	0, 0, 112, 0, 110, 0, 0, 111, 210, 211,
	212, 213, 0, 214, 0, 0, 113, 0, 114, 115,
	0, 0, 215, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 216, 129, 217, 130, 131,
	0, 0, 0, 0, 0, 132, 218, 0, 133, 0,
	219, 134, 135, 136, 0, 220, 137, 221, 138, 0,
	139, 140, 141, 222, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 223, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 0, 157, 158, 0,
	159, 225, 226, 160, 0, 166, 161, 162, 163, 165,
	227, 164, 228, 0, 167, 0, 168, 169, 0, 229,
	230, 231, 0, 0, 170, 232, 233, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 234, 235, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 205, 0, 107, 206, 0,
	207, 0, 108, 109, 1227, 209, 0, 0, 112, 0,
	110, 0, 0, 111, 210, 211, 212, 213, 0, 214,
	0, 0, 113, 0, 114, 115, 0, 0, 215, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 216, 129, 217, 130, 131, 0, 0, 0, 0,
	0, 132, 218, 0, 133, 0, 219, 134, 135, 136,
	0, 220, 137, 221, 138, 0, 139, 140, 141, 222,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 223, 151, 0, 152, 153, 154, 0, 224,
	155, 156, 0, 157, 158, 0, 159, 225, 226, 160,
	0, 166, 161, 162, 163, 165, 227, 164, 228, 0,
	167, 0, 168, 169, 0, 229, 230, 231, 0, 0,
	170, 232, 233, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 234, 235,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 205, 0, 107, 206, 0, 207, 0, 108, 109,
	1216, 209, 0, 0, 112, 0, 110, 0, 0, 111,
	210, 211, 212, 213, 0, 214, 0, 0, 113, 0,
	114, 115, 0, 0, 215, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 216, 129, 217,
	130, 131, 0, 0, 0, 0, 0, 132, 218, 0,
	133, 0, 219, 134, 135, 136, 0, 220, 137, 221,
	138, 0, 139, 140, 141, 222, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 223, 151,
	0, 152, 153, 154, 0, 224, 155, 156, 0, 157,
	158, 0, 159, 225, 226, 160, 0, 166, 161, 162,
	163, 165, 227, 164, 228, 0, 167, 0, 168, 169,
	0, 229, 230, 231, 0, 0, 170, 232, 233, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 234, 235, 71, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 0, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 0, 205, 0, 107,
	206, 0, 207, 0, 108, 109, 821, 209, 0, 0,
	112, 0, 110, 0, 0, 111, 210, 211, 212, 213,
	0, 214, 0, 0, 113, 0, 114, 115, 0, 0,
	215, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 216, 129, 217, 130, 131, 0, 0,
	0, 0, 0, 132, 218, 0, 133, 0, 219, 134,
	135, 136, 0, 220, 137, 221, 138, 0, 139, 140,
	141, 222, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 223, 151, 0, 152, 153, 154,
	0, 224, 155, 156, 0, 157, 158, 0, 159, 225,
	226, 160, 0, 166, 161, 162, 163, 165, 227, 164,
	228, 0, 167, 0, 168, 169, 0, 229, 230, 231,
	0, 0, 170, 232, 233, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	234, 235, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 205, 0, 107, 206, 0, 207, 0,
	108, 109, 208, 209, 0, 0, 112, 0, 110, 0,
	0, 111, 210, 211, 212, 213, 0, 214, 0, 0,
	113, 0, 114, 115, 0, 0, 215, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 216,
	129, 217, 130, 131, 0, 0, 0, 0, 0, 132,
	218, 0, 133, 0, 219, 134, 135, 136, 0, 220,
	137, 221, 138, 0, 139, 140, 141, 222, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	223, 151, 0, 273, 153, 154, 0, 224, 155, 156,
	0, 157, 158, 0, 159, 225, 226, 160, 0, 166,
	161, 162, 163, 165, 227, 164, 228, 0, 167, 0,
	168, 169, 0, 229, 230, 231, 0, 0, 170, 232,
	233, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 234, 235, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 689, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 205,
	0, 107, 206, 0, 207, 0, 108, 109, 208, 209,
	0, 0, 112, 0, 110, 0, 0, 111, 210, 211,
	212, 213, 0, 214, 0, 0, 113, 0, 114, 115,
	0, 0, 215, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 216, 129, 217, 130, 131,
	0, 0, 0, 0, 0, 132, 218, 0, 133, 0,
	219, 134, 135, 136, 0, 220, 137, 221, 138, 0,
	139, 140, 141, 222, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 223, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 0, 0, 158, 0,
	159, 225, 226, 160, 0, 166, 161, 162, 163, 165,
	227, 164, 228, 0, 167, 0, 168, 169, 0, 229,
	230, 231, 0, 0, 170, 232, 233, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 234, 235, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 205, 0, 107, 206, 0,
	207, 0, 108, 109, 453, 209, 0, 0, 112, 0,
	110, 0, 0, 111, 210, 211, 212, 213, 0, 214,
	0, 0, 113, 0, 114, 115, 0, 0, 215, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 216, 129, 217, 130, 131, 0, 0, 0, 0,
	0, 132, 218, 0, 133, 0, 219, 134, 135, 136,
	0, 220, 137, 221, 138, 0, 139, 140, 141, 222,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 223, 151, 0, 152, 153, 154, 0, 224,
	155, 156, 0, 157, 158, 0, 159, 225, 226, 160,
	0, 166, 161, 162, 163, 165, 227, 164, 228, 0,
	167, 0, 168, 169, 0, 229, 230, 231, 0, 0,
	170, 232, 233, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 234, 235,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 205, 0, 107, 206, 0, 207, 0, 108, 109,
	449, 209, 0, 0, 112, 0, 110, 0, 0, 111,
	210, 211, 212, 213, 0, 214, 0, 0, 113, 0,
	114, 115, 0, 0, 215, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 216, 129, 217,
	130, 131, 0, 0, 0, 0, 0, 132, 218, 0,
	133, 0, 219, 134, 135, 136, 0, 220, 137, 221,
	138, 0, 139, 140, 141, 222, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 223, 151,
	0, 152, 153, 154, 0, 224, 155, 156, 0, 157,
	158, 0, 159, 225, 226, 160, 0, 166, 161, 162,
	163, 165, 227, 164, 228, 0, 167, 0, 168, 169,
	0, 229, 230, 231, 0, 0, 170, 232, 233, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 234, 235, 71, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 410, 0, 198, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 0, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 0, 205, 0, 107,
	206, 0, 207, 0, 108, 109, 208, 209, 0, 0,
	112, 0, 110, 0, 0, 111, 210, 211, 212, 213,
	0, 214, 0, 0, 113, 0, 114, 115, 0, 0,
	215, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 284, 0, 124, 125, 128, 126,
	0, 127, 0, 216, 129, 217, 130, 131, 0, 0,
	0, 0, 0, 132, 218, 0, 133, 0, 219, 134,
	135, 136, 0, 220, 137, 221, 138, 0, 139, 140,
	141, 222, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 223, 151, 0, 152, 153, 154,
	0, 224, 155, 156, 0, 157, 158, 0, 159, 225,
	226, 160, 0, 166, 161, 162, 163, 165, 227, 164,
	228, 0, 167, 0, 168, 169, 0, 283, 230, 231,
	0, 0, 279, 232, 233, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	234, 235, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 205, 0, 107, 206, 0, 207, 0,
	108, 109, 208, 209, 0, 0, 112, 0, 110, 0,
	0, 111, 210, 211, 212, 213, 0, 214, 0, 0,
	113, 0, 114, 115, 0, 0, 215, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	284, 0, 124, 125, 128, 126, 0, 127, 0, 216,
	129, 217, 130, 131, 0, 0, 0, 0, 0, 132,
	218, 0, 133, 0, 219, 134, 135, 136, 0, 220,
	137, 221, 138, 0, 139, 140, 141, 222, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	223, 151, 0, 152, 153, 154, 0, 224, 155, 156,
	0, 157, 158, 0, 159, 225, 226, 160, 0, 166,
	161, 162, 163, 165, 227, 164, 228, 0, 167, 0,
	168, 169, 0, 283, 230, 231, 0, 0, 279, 232,
	233, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 234, 235, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 205,
	0, 107, 206, 0, 207, 0, 108, 109, 375, 209,
	0, 0, 112, 0, 110, 0, 0, 111, 210, 211,
	212, 213, 0, 214, 0, 0, 113, 0, 114, 115,
	0, 0, 215, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 216, 129, 217, 130, 131,
	0, 0, 0, 0, 0, 132, 218, 0, 133, 0,
	219, 134, 135, 136, 0, 220, 137, 221, 138, 0,
	139, 140, 141, 222, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 223, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 0, 157, 158, 0,
	159, 225, 226, 160, 0, 166, 161, 162, 163, 165,
	227, 164, 228, 0, 167, 0, 168, 169, 0, 229,
	230, 231, 0, 0, 170, 232, 233, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 234, 235, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 205, 0, 107, 206, 0,
	207, 0, 108, 109, 372, 209, 0, 0, 112, 0,
	110, 0, 0, 111, 210, 211, 212, 213, 0, 214,
	0, 0, 113, 0, 114, 115, 0, 0, 215, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 216, 129, 217, 130, 131, 0, 0, 0, 0,
	0, 132, 218, 0, 133, 0, 219, 134, 135, 136,
	0, 220, 137, 221, 138, 0, 139, 140, 141, 222,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 223, 151, 0, 152, 153, 154, 0, 224,
	155, 156, 0, 157, 158, 0, 159, 225, 226, 160,
	0, 166, 161, 162, 163, 165, 227, 164, 228, 0,
	167, 0, 168, 169, 0, 229, 230, 231, 0, 0,
	170, 232, 233, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 234, 235,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 205, 0, 107, 206, 0, 207, 0, 108, 109,
	369, 209, 0, 0, 112, 0, 110, 0, 0, 111,
	210, 211, 212, 213, 0, 214, 0, 0, 113, 0,
	114, 115, 0, 0, 215, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 216, 129, 217,
	130, 131, 0, 0, 0, 0, 0, 132, 218, 0,
	133, 0, 219, 134, 135, 136, 0, 220, 137, 221,
	138, 0, 139, 140, 141, 222, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 223, 151,
	0, 152, 153, 154, 0, 224, 155, 156, 0, 157,
	158, 0, 159, 225, 226, 160, 0, 166, 161, 162,
	163, 165, 227, 164, 228, 0, 167, 0, 168, 169,
	0, 229, 230, 231, 0, 0, 170, 232, 233, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 234, 235, 71, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 0, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 0, 205, 0, 107,
	206, 0, 207, 0, 108, 109, 367, 209, 0, 0,
	112, 0, 110, 0, 0, 111, 210, 211, 212, 213,
	0, 214, 0, 0, 113, 0, 114, 115, 0, 0,
	215, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 216, 129, 217, 130, 131, 0, 0,
	0, 0, 0, 132, 218, 0, 133, 0, 219, 134,
	135, 136, 0, 220, 137, 221, 138, 0, 139, 140,
	141, 222, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 223, 151, 0, 152, 153, 154,
	0, 224, 155, 156, 0, 157, 158, 0, 159, 225,
	226, 160, 0, 166, 161, 162, 163, 165, 227, 164,
	228, 0, 167, 0, 168, 169, 0, 229, 230, 231,
	0, 0, 170, 232, 233, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	234, 235, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 205, 0, 107, 206, 0, 207, 0,
	108, 109, 350, 209, 0, 0, 112, 0, 110, 0,
	0, 111, 210, 211, 212, 213, 0, 214, 0, 0,
	113, 0, 114, 115, 0, 0, 215, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 216,
	129, 217, 130, 131, 0, 0, 0, 0, 0, 132,
	218, 0, 133, 0, 219, 134, 135, 136, 0, 220,
	137, 221, 138, 0, 139, 140, 141, 222, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	223, 151, 0, 152, 153, 154, 0, 224, 155, 156,
	0, 157, 158, 0, 159, 225, 226, 160, 0, 166,
	161, 162, 163, 165, 227, 164, 228, 0, 167, 0,
	168, 169, 0, 229, 230, 231, 0, 0, 170, 232,
	233, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 234, 235, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 205,
	0, 107, 206, 0, 207, 0, 108, 109, 208, 209,
	0, 0, 112, 0, 110, 0, 0, 111, 210, 211,
	212, 213, 0, 214, 0, 0, 113, 0, 114, 115,
	0, 0, 215, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 216, 129, 217, 130, 131,
	0, 0, 0, 0, 0, 132, 218, 0, 133, 0,
	219, 134, 135, 136, 0, 220, 137, 221, 138, 0,
	139, 140, 141, 222, 331, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 223, 151, 0, 152,
	153, 154, 0, 224, 155, 156, 0, 157, 158, 0,
	159, 225, 226, 160, 0, 166, 161, 162, 163, 165,
	227, 164, 228, 0, 167, 0, 168, 169, 0, 229,
	230, 231, 0, 0, 170, 232, 233, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 234, 235, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 205, 0, 107, 206, 0,
	207, 0, 108, 109, 208, 209, 0, 0, 112, 0,
	110, 0, 0, 111, 210, 211, 212, 213, 0, 214,
	0, 0, 113, 0, 114, 115, 0, 0, 215, 0,
	116, 0, 0, 276, 0, 0, 118, 0, 119, 120,
	121, 122, 284, 0, 124, 125, 128, 126, 0, 127,
	0, 216, 129, 217, 130, 131, 0, 0, 0, 0,
	0, 132, 218, 0, 133, 0, 219, 134, 135, 136,
	0, 220, 137, 221, 138, 0, 139, 140, 141, 222,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 278, 151, 0, 152, 153, 154, 0, 224,
	155, 277, 0, 157, 158, 0, 159, 225, 226, 160,
	0, 166, 161, 162, 163, 165, 227, 164, 228, 0,
	167, 0, 168, 169, 0, 283, 230, 231, 0, 0,
	279, 232, 233, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 234, 235,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 205, 0, 107, 206, 0, 207, 0, 108, 109,
	208, 209, 0, 0, 112, 0, 110, 0, 0, 111,
	210, 211, 212, 213, 0, 214, 0, 0, 113, 0,
	114, 115, 0, 0, 215, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 216, 129, 217,
	130, 131, 0, 0, 0, 0, 0, 132, 218, 0,
	133, 0, 219, 134, 135, 0, 0, 220, 137, 221,
	138, 0, 139, 0, 141, 222, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 223, 0,
	0, 152, 153, 154, 0, 224, 155, 156, 0, 157,
	158, 0, 159, 225, 226, 160, 0, 166, 161, 162,
	163, 165, 227, 164, 228, 0, 167, 0, 168, 169,
	0, 229, 230, 231, 0, 0, 170, 232, 233, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 234, 235, 0, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 847, 848, 0,
	867, 868, 869, 877, 878, 879, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 0, 0, 0, 0,
	850, 0, 881, 847, 848, 0, 867, 868, 869, 877,
	878, 879, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 849, 0, 0, 0, 0, 850, 864, 881, 0,
	0, 0, 847, 848, 0, 867, 868, 869, 877, 878,
	879, 0, 0, 0, 0, 0, 0, 849, 870, 0,
	0, 0, 0, 864, 0, 850, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 849, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 882, 0, 0, 0, 0, 0,
	0, 855, 0, 0, 0, 0, 0, 0, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 874,
	882, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	855, 0, 0, 0, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 871, 0, 874, 882,
	865, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 871, 872, 0, 0, 0, 0, 0, 865,
	0, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 871, 0, 0, 0, 0, 0, 866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 873, 0,
	0, 861, 862, 863, 0, 860, 857, 858, 859, 851,
	852, 853, 854, 856, 0, 876, 0, 0, 0, 0,
	0, 0, 1694, 0, 873, 0, 0, 861, 862, 863,
	0, 860, 857, 858, 859, 851, 852, 853, 854, 856,
	0, 876, 0, 0, 0, 0, 1371, 1372, 1413, 1389,
	1390, 1391, 0, 873, 0, 0, 861, 862, 863, 0,
	860, 857, 858, 859, 851, 852, 853, 854, 856, 0,
	876, 0, 0, 0, 0, 847, 848, 1412, 867, 868,
	869, 877, 878, 879, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 0, 0, 1386, 0, 850, 0,
	881, 847, 848, 0, 867, 868, 869, 877, 878, 879,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 849,
	0, 0, 0, 0, 850, 864, 881, 0, 0, 0,
	847, 848, 0, 867, 868, 869, 877, 878, 879, 0,
	0, 0, 0, 0, 1377, 849, 870, 0, 0, 0,
	0, 864, 0, 850, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 1393, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 855, 849, 0, 0, 1392, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 882, 1387, 0, 0, 0, 0, 0, 855,
	0, 0, 0, 0, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 874, 882, 0,
	0, 0, 865, 0, 0, 0, 0, 0, 855, 0,
	0, 0, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 871, 0, 874, 882, 865, 0,
	1388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	871, 872, 0, 0, 0, 0, 0, 865, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	1383, 1384, 1385, 0, 1382, 1379, 1380, 1381, 1373, 1374,
	1375, 1376, 1378, 0, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 873, 0, 0, 861,
	862, 863, 0, 860, 857, 858, 859, 851, 852, 853,
	854, 856, 0, 876, 0, 0, 0, 0, 0, 0,
	1411, 0, 873, 0, 0, 861, 862, 863, 0, 860,
	857, 858, 859, 851, 852, 853, 854, 856, 0, 876,
	0, 0, 0, 0, 0, 0, 1364, 0, 0, 0,
	0, 873, 0, 0, 861, 862, 863, 0, 860, 857,
	858, 859, 851, 852, 853, 854, 856, 0, 876, 0,
	847, 848, 1816, 867, 868, 869, 877, 878, 879, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 0, 850, 0, 881, 847, 848, 0, 867,
	868, 869, 877, 878, 879, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 849, 0, 0, 0, 0, 850,
	864, 881, 0, 0, 0, 847, 848, 0, 867, 868,
	869, 877, 878, 879, 0, 0, 0, 0, 0, 0,
	849, 870, 0, 0, 0, 0, 864, 0, 850, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 849,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 882, 0, 0,
	0, 0, 0, 0, 855, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 874, 882, 0, 0, 0, 865, 0, 0,
	0, 0, 0, 855, 0, 0, 0, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 871,
	0, 874, 882, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 871, 872, 0, 0, 0,
	0, 0, 865, 0, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 873, 0, 0, 861, 862, 863, 0, 860, 857,
	858, 859, 851, 852, 853, 854, 856, 0, 876, 0,
	0, 0, 1814, 0, 0, 0, 0, 873, 0, 0,
	861, 862, 863, 0, 860, 857, 858, 859, 851, 852,
	853, 854, 856, 0, 876, 0, 1371, 1372, 1795, 1389,
	1390, 1391, 0, 0, 0, 0, 873, 0, 0, 861,
	862, 863, 1516, 860, 857, 858, 859, 851, 852, 853,
	854, 856, 0, 876, 0, 847, 848, 1770, 867, 868,
	869, 877, 878, 879, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 0, 0, 1386, 0, 850, 0,
	881, 847, 848, 0, 867, 868, 869, 877, 878, 879,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 849,
	0, 0, 0, 0, 850, 864, 881, 0, 0, 0,
	847, 848, 0, 867, 868, 869, 877, 878, 879, 0,
	0, 0, 0, 0, 1377, 849, 870, 0, 0, 0,
	0, 864, 0, 850, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 855, 849, 0, 0, 1392, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 882, 1387, 0, 0, 0, 0, 0, 855,
	0, 0, 0, 0, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 874, 882, 0,
	0, 0, 865, 0, 0, 0, 0, 0, 855, 0,
	0, 0, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 871, 0, 874, 882, 865, 0,
	1388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	871, 872, 0, 0, 0, 0, 0, 865, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	1383, 1384, 1385, 0, 1382, 1379, 1380, 1381, 1373, 1374,
	1375, 1376, 1378, 0, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 873, 0, 0, 861,
	862, 863, 0, 860, 857, 858, 859, 851, 852, 853,
	854, 856, 0, 876, 0, 0, 0, 1765, 0, 0,
	0, 0, 873, 0, 0, 861, 862, 863, 0, 860,
	857, 858, 859, 851, 852, 853, 854, 856, 0, 876,
	0, 1371, 1372, 1761, 1389, 1390, 1391, 0, 0, 0,
	0, 873, 0, 0, 861, 862, 863, 1515, 860, 857,
	858, 859, 851, 852, 853, 854, 856, 0, 876, 0,
	847, 848, 1696, 867, 868, 869, 877, 878, 879, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 1386, 0, 850, 0, 881, 847, 848, 0, 867,
	868, 869, 877, 878, 879, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 849, 0, 0, 0, 0, 850,
	864, 881, 0, 0, 0, 847, 848, 0, 867, 868,
	869, 877, 878, 879, 0, 0, 0, 0, 0, 1377,
	849, 870, 0, 0, 0, 0, 864, 0, 850, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 849,
	0, 0, 1392, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 882, 1387, 0,
	0, 0, 0, 0, 855, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 874, 882, 0, 0, 0, 865, 0, 0,
	0, 0, 0, 855, 0, 0, 0, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 871,
	0, 874, 882, 865, 0, 1388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 871, 872, 0, 0, 0,
	0, 0, 865, 0, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 1383, 1384, 1385, 0, 1382,
	1379, 1380, 1381, 1373, 1374, 1375, 1376, 1378, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 873, 0, 0, 861, 862, 863, 0, 860, 857,
	858, 859, 851, 852, 853, 854, 856, 0, 876, 0,
	0, 0, 1695, 0, 0, 0, 0, 873, 0, 0,
	861, 862, 863, 0, 860, 857, 858, 859, 851, 852,
	853, 854, 856, 0, 876, 0, 1371, 1372, 1603, 1389,
	1390, 1391, 0, 0, 0, 0, 873, 0, 0, 861,
	862, 863, 0, 860, 857, 858, 859, 851, 852, 853,
	854, 856, 0, 876, 0, 847, 848, 1537, 867, 868,
	869, 877, 878, 879, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 0, 0, 1386, 0, 850, 0,
	881, 847, 848, 0, 867, 868, 869, 877, 878, 879,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 849,
	0, 0, 0, 0, 850, 864, 881, 0, 0, 0,
	847, 848, 0, 867, 868, 869, 877, 878, 879, 0,
	0, 0, 0, 0, 1377, 849, 870, 0, 0, 0,
	0, 864, 0, 850, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 855, 849, 0, 0, 1392, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 882, 1387, 0, 0, 0, 0, 0, 855,
	0, 0, 0, 0, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 874, 882, 0,
	0, 0, 865, 0, 0, 0, 0, 0, 855, 0,
	0, 0, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 871, 0, 874, 882, 865, 0,
	1388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	871, 872, 0, 0, 0, 0, 0, 865, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	1383, 1384, 1385, 0, 1382, 1379, 1380, 1381, 1373, 1374,
	1375, 1376, 1378, 0, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 873, 0, 0, 861,
	862, 863, 0, 860, 857, 858, 859, 851, 852, 853,
	854, 856, 0, 876, 0, 0, 0, 1521, 0, 0,
	0, 0, 873, 0, 0, 861, 862, 863, 0, 860,
	857, 858, 859, 851, 852, 853, 854, 856, 0, 876,
	0, 0, 0, 1138, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 861, 862, 863, 0, 860, 857,
	858, 859, 851, 852, 853, 854, 856, 0, 876, 0,
	1451, 847, 848, 0, 867, 868, 869, 877, 878, 879,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 0, 850, 0, 881, 847, 848, 0,
	867, 868, 869, 877, 878, 879, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 849, 0, 0, 0, 0,
	850, 864, 881, 0, 0, 0, 0, 0, 0, 847,
	848, 0, 867, 868, 869, 877, 878, 879, 0, 0,
	0, 849, 0, 0, 0, 870, 0, 864, 0, 0,
	1071, 0, 850, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 855,
	1884, 0, 0, 849, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 874, 882, 0,
	0, 0, 0, 0, 0, 855, 0, 1403, 0, 0,
	1402, 0, 880, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 872, 874, 882, 0, 0, 0, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	871, 0, 0, 0, 865, 874, 882, 0, 0, 0,
	0, 0, 0, 1883, 0, 0, 0, 0, 0, 0,
	880, 0, 0, 0, 0, 0, 871, 0, 0, 0,
	872, 0, 0, 0, 0, 866, 865, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 0,
	0, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 875, 861, 862, 863, 0, 860,
	857, 858, 859, 851, 852, 853, 854, 856, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 861, 862, 863, 0, 860, 857, 858, 859, 851,
	852, 853, 854, 856, 0, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 861, 862, 863, 0, 860, 857, 858,
	859, 851, 852, 853, 854, 856, 884, 876, 0, 0,
	0, 0, 847, 848, 0, 867, 868, 869, 877, 878,
	879, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 883, 0, 0, 850, 0, 881, 847, 848,
	0, 867, 868, 869, 877, 878, 879, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 849, 0, 0, 0,
	0, 850, 864, 881, 0, 0, 0, 0, 0, 0,
	847, 848, 0, 867, 868, 869, 877, 878, 879, 0,
	0, 0, 849, 0, 0, 0, 870, 0, 864, 0,
	0, 0, 0, 850, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	855, 0, 0, 0, 849, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 874, 882,
	0, 0, 0, 0, 0, 0, 855, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 874, 882, 0, 0, 0, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 871, 0, 0, 0, 865, 874, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 871, 326, 0,
	0, 872, 0, 0, 0, 0, 866, 865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 875, 861, 862, 863, 0,
	860, 857, 858, 859, 851, 852, 853, 854, 856, 0,
	876, 0, 0, 0, 1531, 0, 0, 0, 0, 873,
	0, 0, 861, 862, 863, 0, 860, 857, 858, 859,
	851, 852, 853, 854, 856, 0, 876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 861, 862, 863, 0, 860, 857,
	858, 859, 851, 852, 853, 854, 856, 0, 876, 847,
	848, 0, 867, 868, 869, 877, 878, 879, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 0, 850, 0, 881, 847, 848, 0, 867, 868,
	869, 877, 878, 879, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 849, 0, 1404, 0, 0, 850, 864,
	881, 0, 0, 0, 847, 848, 0, 867, 868, 869,
	877, 878, 879, 0, 0, 0, 0, 0, 0, 849,
	870, 0, 0, 0, 0, 864, 0, 850, 0, 881,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 849, 0,
	0, 0, 1409, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 882, 0, 0, 0,
	0, 0, 0, 855, 0, 0, 0, 0, 0, 0,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 874, 882, 0, 0, 0, 865, 0, 0, 0,
	0, 0, 855, 0, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 871, 0,
	874, 882, 865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 872, 0, 0, 0, 0,
	0, 865, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 871, 0, 0, 0, 0, 0, 866,
	0, 0, 0, 0, 1369, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	873, 0, 0, 861, 862, 863, 0, 860, 857, 858,
	859, 851, 852, 853, 854, 856, 0, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 861,
	862, 863, 0, 860, 857, 858, 859, 851, 852, 853,
	854, 856, 0, 876, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 861, 862,
	863, 0, 860, 857, 858, 859, 851, 852, 853, 854,
	856, 0, 876, 847, 848, 0, 867, 868, 869, 877,
	878, 879, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 0, 1363, 0, 0, 850, 0, 881, 847,
	848, 0, 867, 868, 869, 877, 878, 879, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 849, 0, 0,
	0, 0, 850, 864, 881, 0, 0, 0, 847, 848,
	0, 867, 868, 869, 877, 878, 879, 0, 0, 0,
	0, 0, 0, 849, 0, 0, 0, 0, 0, 864,
	0, 850, 0, 881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 855, 849, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	882, 0, 0, 0, 0, 0, 0, 855, 0, 0,
	0, 0, 0, 0, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 874, 882, 0, 0, 0,
	865, 0, 0, 0, 0, 0, 855, 0, 0, 0,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 0, 871, 0, 874, 882, 865, 847, 848, 0,
	867, 868, 869, 877, 878, 879, 0, 0, 0, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 872,
	850, 0, 881, 0, 0, 865, 0, 866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 849, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 873, 855, 0, 861, 862, 863,
	0, 860, 857, 858, 859, 851, 852, 853, 854, 856,
	0, 876, 0, 874, 882, 0, 0, 0, 0, 0,
	873, 0, 0, 861, 862, 863, 0, 860, 857, 858,
	859, 851, 852, 853, 854, 856, 0, 876, 872, 0,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 873,
	0, 0, 861, 862, 863, 0, 860, 857, 858, 859,
	851, 852, 853, 854, 856, 0, 876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	727, 720, 744, 714, 735, 734, 0, 0, 716, 715,
	0, 866, 0, 746, 745, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 732, 731, 0, 0,
	0, 0, 0, 0, 0, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 729, 0, 0, 0, 0, 0, 0, 873, 721,
	0, 861, 862, 863, 0, 860, 857, 858, 859, 851,
	852, 853, 854, 856, 0, 876, 0, 0, 722, 723,
	724, 725, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 0, 0,
	0, 726, 719, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	741, 742, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747,
}
var sqlPact = [...]int{

	3007, -1000, 18, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 698, 16048, -1000, -1000,
	-1000, -1000, -1000, 849, 646, 610, 16048, 16048, 15782, 998,
	998, 17378, -1000, -1000, 20570, -1000, 2922, 459, 467, 459,
	459, 466, 17378, 537, 611, 109, -1000, 896, -18, 20304,
	16048, 1333, 21, 14718, 326, 3007, 15516, 20038, 16048, 298,
	30, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1179, 1056, 1054, 14718,
	19772, 19506, 19240, 18974, -1000, 10158, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 521, 340, 338, -1000, 15250, -1000,
	881, -1000, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 878, -1000, 16048, -1000, -1000, 18708, 18442, 337, 828,
	-1000, -1000, 550, 393, 1364, -1000, 35, -1000, -1000, 1177,
	-1000, 874, 1176, 1173, 1171, 1164, 1159, 1157, 392, 837,
	-1000, 520, 828, -1000, 828, -1000, -1000, -1000, 505, 17378,
	-1000, 14718, -1000, 18176, 16048, 1080, 17910, -1000, 896, -1000,
	-1000, -1000, 904, 1331, 1331, 1331, 1357, 124, 122, 109,
	6, 16048, -1000, 335, 6, 7096, 7096, -1000, -1000, 326,
	-1000, 343, 12851, -1000, 7654, -1000, 823, 1249, 418, 682,
	1248, -96, 723, 557, 12043, 30, -1000, -1000, -1000, 9052,
	4227, 14718, 16048, 16048, 615, 17644, -1000, 1246, 99, 1245,
	-1000, 97, 1238, -1000, 97, 1237, -8, -1000, -1000, -1000,
	-1000, -1000, -1000, 326, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14984, 1393,
	24564, -1000, 9052, -1000, -1000, 13120, 1127, 13120, -1000, -1000,
	1391, -1000, 9052, -1000, 19, 16, 987, 1124, 10703, 10437,
	1295, 948, -1000, -1000, -1000, 32, 4504, 16048, 1187, 13120,
	16048, 16048, 16048, 16048, 16048, 16048, -1000, 983, -1000, 16048,
	-1000, 13, 8, -1000, 17378, -1000, 102, -1000, 325, 959,
	140, 17112, 1256, 952, -1000, 904, -1000, 818, 980, 8215,
	9052, 109, -1000, -1000, 109, 109, 9052, -1000, -1000, 16048,
	6, 1387, 16048, 76, -1000, 23532, -1000, -1000, 9052, 9052,
	9052, 9052, 9052, 791, -1000, -1000, -1000, 5359, -1000, -1000,
	30, 321, 243, -1000, -1000, 319, 30, -1000, -1000, -1000,
	-1000, 318, 1499, 373, -1000, -1000, -1000, 9052, 400, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1186, 315,
	314, -1000, -1000, -1000, -1000, 313, 312, 309, 308, 307,
	296, 294, 290, 280, 275, 274, 273, 272, 270, 744,
	-1000, 411, -1000, -1000, 411, 411, -1000, 267, 267, 268,
	-1000, -1000, -1000, -1000, 267, -1000, -1000, -1000, 387, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 269, 76, -1000, -1000,
	-1000, 16048, -9, -1000, 24249, -1000, -6, 757, -1000, 14186,
	1334, 1329, 1320, 14718, 1370, 1369, 504, 16048, 16048, 503,
	-1000, 1156, -16, -1000, -1000, 3009, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 405, 239, 1385, 239, 12313, -1000, 16048,
	16048, -1000, 16048, -1000, -1000, 16048, -1000, 16048, 16048, -1000,
	16048, 147, 13654, 906, 1226, -18, -20, -1000, 1395, -1000,
	-1000, -1000, -1000, 278, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 268,
	744, 267, 267, 267, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 387, -1000, -1000, 411, 411, 411, -1000, -1000, -21,
	24249, 493, -1, 13387, 16048, -1000, 27, -1000, -1000, 1148,
	458, -26, 736, 1041, 825, -1000, -1000, -1000, -1000, 4,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1467, -1000, -1000, -1000, -1000, 1473, 4, -1000, -1000, -1000,
	-1000, -1000, 1487, -1000, -1000, -1000, 4504, -1000, -1000, -1000,
	16048, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	736, 1041, -1000, -1000, 14718, 13920, 1383, 1225, 1378, 16048,
	872, 947, -1000, -1000, 378, 1221, -1000, -1000, -1000, -1000,
	24249, -1000, 24249, 681, 1069, -1000, 1069, 2, -1000, 23239,
	-1000, 265, -30, -1000, 405, 7096, 11774, 24564, 24564, 16048,
	515, 9052, 9052, 9052, 9052, 9052, 9052, 9052, 9052, 9052,
	9052, 9052, 9052, 9052, 9052, 9052, 9052, 9052, 9052, 9052,
	9052, 9052, 9052, 814, 9052, 492, 9052, 9052, 9052, 9052,
	1297, 749, 251, 4504, -1000, 636, 636, 636, 24278, 24278,
	158, 17, 22861, 1, 30, -1000, -1000, 6814, 6515, 30,
	4781, -1000, 590, 1472, 409, 24249, 1132, 1126, 264, 119,
	116, 9052, 9052, 799, 9052, 9331, 9052, 9052, 5638, 9052,
	9052, 9052, 9052, 9052, 9052, -1000, 263, -1000, -1000, -1000,
	-1000, 1470, -1000, -1000, 1465, -1000, 514, 512, 1463, 405,
	115, 7654, -1000, 906, 16048, 16048, 16048, -1000, -1000, 940,
	16846, 936, 24564, 16048, -1000, 261, 260, 1009, 1001, 16048,
	16048, 16580, 16314, 16048, 822, 258, 253, 16048, 713, -1000,
	16048, 556, 1145, 16048, -1000, 9052, 635, 9052, 731, -1000,
	11235, 416, 16048, 668, 68, -1000, -1000, -1000, 376, 16048,
	-1000, -1000, -1000, 99, -1000, 97, 97, -1000, -1000, 14718,
	-1000, -1000, -1000, -1000, -1000, -1000, 24564, 349, 346, -1000,
	1451, 491, -1000, 490, 488, 487, -1000, 252, -1000, 9052,
	16048, 13387, -1, -3, -1000, -1000, 16048, 1041, -1000, -1000,
	-1000, -1000, 652, -1000, 679, -1000, 10969, -1000, -1000, -1000,
	590, -1000, -7, -1000, -1000, -1000, -1000, 114, -32, -5,
	24564, -1000, -1000, -1000, -1000, -1000, 16048, 310, 16048, -18,
	16048, -18, 16048, 1219, 1483, 16048, -1000, -1000, -1000, 9052,
	-1000, -1000, -1000, -18, 16048, -1000, 1119, -1000, -45, 1125,
	-131, 14452, -1000, 3428, -1000, -1000, -1000, 388, 879, 879,
	506, 506, 506, 506, 183, 183, 336, 2643, 607, 607,
	607, 2595, 450, 450, 607, 607, 607, 24278, 3116, 1929,
	9052, 9052, 484, 747, 251, 1929, 9052, 1427, 1929, 1929,
	1929, -1000, 1292, -1000, -1000, -1000, 1141, 250, 9331, 9331,
	-1000, -1000, -1000, 5359, -1000, -1000, 247, 9052, -1000, 9052,
	-37, -52, -1000, -1000, -69, -1000, -1000, -17, 9052, 9052,
	9052, 112, -1000, 111, 601, -1000, 9052, 800, 246, 242,
	9052, -1000, -1000, 24223, 21481, 110, 1140, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 107, 23934, 98, 21426, -1000, 9331,
	9331, 9331, 5359, 223, 94, 23207, -85, 23905, 7933, 7933,
	7933, 92, 23879, 9052, -85, 21455, 21162, 21133, -70, -71,
	-75, 1447, -76, 91, 386, 379, 90, 1119, -1000, -1000,
	-1000, -1000, 482, 480, 1211, -1000, 935, -1000, 420, -1000,
	806, 9052, 16048, 221, 219, 702, -1000, 1209, 889, 1203,
	889, -1000, -6, 675, 9052, 9052, -1000, 474, -1000, -1000,
	548, -1000, 22890, -1000, 7096, 24249, -1000, 641, 1323, -77,
	-1000, -1000, 7096, 405, 12313, 11774, 7654, -81, -1000, -1000,
	-1000, 906, -1000, 477, 1442, 89, 914, 876, 674, 617,
	1437, 24249, -7, -1000, -7, -1000, -1000, -1000, -1000, -1000,
	-1000, 16048, 1084, -1000, 13920, 218, 16048, 217, -1000, 213,
	-1000, 211, 16048, -1000, 1256, -1000, 87, -1000, 1115, 1355,
	-1000, 11774, 895, 1039, 1033, 11774, 1101, 802, 802, 802,
	-1000, 14452, 3939, -1000, -1000, 16048, 210, 11504, 85, 1125,
	9052, 1929, 1929, 9052, 9331, 9331, -1000, 1929, -1000, -1000,
	-1000, -1000, 1139, 209, 9052, 24564, 22461, 22116, -83, 6216,
	-10, 22835, -1000, -1000, 243, -1000, 84, 7375, -1000, 23558,
	-13, -13, -1000, 1482, 1254, -1000, 9052, 23590, -1000, 12582,
	407, 817, 22545, 24564, 24564, -1000, 9052, -1000, 1138, 9052,
	-1000, 24564, 24564, 9331, 9331, 9331, 9331, 9331, 9331, 9331,
	9331, 9331, 9331, 9331, 9331, 9331, 9331, 9331, 9331, 9331,
	9331, 9331, 973, 9331, 1421, 1421, 1421, -25, 5917, -1000,
	1185, 1138, 9052, 9052, 24564, 83, 81, 74, -1000, 9052,
	-85, 9052, 9052, 9052, -1000, -1000, -1000, 72, -1000, 1432,
	-1000, -1000, -1000, -1000, 1115, 16048, 16048, 16048, 1202, -1000,
	976, -1000, 22516, -87, 16048, 16048, -1000, 1023, 1103, 451,
	16048, -1000, 16048, -1000, 16048, 16048, 16048, -88, -93, 16048,
	-1000, -1000, -44, 7096, 207, -18, -44, 635, -1000, -43,
	-1000, 371, -1000, 344, 196, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 69, -1000, -1000, 1093, -1000, 9889, 198,
	16048, 13920, 1375, 9889, 866, -1000, -1000, 403, 9052, 9052,
	1125, 485, 11774, 11774, 1775, 1008, 11774, -1000, -1000, -1000,
	-1000, -1000, -1000, 1068, 190, 16048, 14452, 495, 1929, 1993,
	241, 9052, 24564, 24397, -94, 9052, 9052, -1000, -98, -1000,
	9052, -1000, -1000, 1481, 9052, 66, 58, 56, -1000, -1000,
	24249, 9052, -1000, -1000, 20836, 9052, 55, -1000, 54, 51,
	24249, 1185, 24249, -1000, -1000, 535, 535, 1421, 1421, 1421,
	1421, 716, 716, 572, 2172, 478, 478, 478, 910, 932,
	932, 478, 478, 478, 1136, 1007, 186, 22806, 9052, -99,
	-1000, -1000, -1000, 24249, 24249, 50, -1000, -1000, -1000, -85,
	21107, 22490, 22200, -1000, 46, 403, -1000, -1000, -1000, 16048,
	-1000, 16048, -1000, 16048, 16048, 1118, 929, -1000, -1000, 999,
	185, 9331, 16048, -1000, 811, -100, -106, 928, -1000, 883,
	9052, -1000, 24564, 889, 889, -1000, 471, 470, -1000, -1000,
	-1000, -44, 1261, 16048, 1308, -1000, -1000, 184, -1000, -1000,
	-1000, 782, -107, -1000, 195, 1335, 9052, -1000, -1000, 168,
	9889, -114, 43, -18, -115, 16048, -1000, 16048, 24249, -85,
	511, -1000, 1775, -1000, 161, 9052, 11774, -1000, -164, -1000,
	364, -1000, 16048, -119, -1000, 9052, 9052, 24397, -123, -1000,
	1929, 1929, -1000, 22171, -1000, 23558, -1000, -1000, -1000, 24249,
	755, -1000, 22145, -1000, -1000, -1000, -1000, 9331, 1134, 155,
	24564, 21855, -1000, -1000, 9052, -1000, -1000, -1000, -1000, -1000,
	1016, -1000, -1000, 16048, 934, -1000, -1000, 9052, 22806, 153,
	1084, 150, -1000, -1000, -1000, 729, -1000, -1000, 24249, 1338,
	-1000, -1000, 16048, 16048, 528, -128, 16048, -1000, -1000, 5080,
	16048, 811, 9889, 1328, 30, 16048, 1328, 21826, 4781, -129,
	-1000, 1084, -1000, 811, 149, -60, -1000, 1374, 1429, -1000,
	16048, 24249, -1000, 1068, -1000, 4504, -134, -1000, 1929, 1929,
	-1000, -1000, 42, 817, 1350, -1000, 2350, 9331, 24564, -136,
	-1000, 21800, -1000, -1000, 1201, 21510, 958, 16048, -1000, 16048,
	16048, 423, 16048, -1000, -1000, 612, -1000, 405, -1000, 148,
	1084, -1000, -1000, -1000, -1000, 1335, -17, 811, -1000, 1084,
	9889, 16048, 145, -1000, -140, -1000, -1000, -1000, -1000, 658,
	9052, 2350, -141, -1000, -1000, 1195, -1000, 838, 769, 40,
	-151, 140, -1000, 9052, -1000, 12313, -1000, 16048, -1000, 1328,
	39, 1084, -1000, -152, -1000, -1000, -1000, 37, 8773, 8773,
	-85, -1000, 16048, -1000, 864, 840, 620, -1000, -1000, -1000,
	-1000, -1000, 958, 24249, -127, -156, -1000, -1000, -1000, 811,
	-1000, -1000, -1000, 9610, 858, 628, 23181, -1000, -1000, -1000,
	1275, -1000, 443, 1025, 1025, 838, -1000, 807, 1084, 1399,
	-1000, -1000, -1000, -1000, -1000, -1000, 1410, -1000, -1000, 986,
	-1000, -1000, -1000, -1000, -1000, -1000, 8494, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1734, 1733, 1387, 124, 1732, 123, 1730, 1729, 1726,
	1721, 1720, 94, 121, 120, 116, 1719, 74, 1715, 1714,
	1713, 93, 1711, 1710, 1708, 78, 1707, 1706, 1701, 1700,
	1699, 1698, 81, 25, 136, 2269, 128, 1697, 1696, 1695,
	16, 92, 66, 1694, 50, 1692, 1690, 59, 95, 99,
	1097, 35, 1689, 1688, 132, 31, 17, 1121, 90, 139,
	112, 113, 1687, 1684, 1683, 36, 1682, 1, 1680, 1678,
	14, 48, 15, 1675, 18, 55, 1673, 1668, 118, 1667,
	65, 96, 109, 22, 107, 79, 1666, 58, 11, 70,
	1656, 26, 1655, 32, 75, 131, 1654, 40, 142, 63,
	23, 51, 1652, 1651, 1650, 1649, 76, 1647, 88, 62,
	1645, 1644, 71, 1643, 119, 127, 1640, 1639, 115, 1638,
	1637, 1636, 695, 1635, 1632, 287, 1628, 5, 41, 57,
	9, 104, 103, 24, 1627, 13, 1626, 1380, 812, 197,
	1625, 49, 54, 80, 43, 52, 47, 1623, 1620, 98,
	1618, 1617, 1615, 1614, 1613, 77, 1612, 72, 134, 34,
	56, 100, 21, 46, 85, 91, 138, 102, 1611, 1610,
	111, 1609, 257, 1608, 1607, 1501, 105, 1606, 1602, 1601,
	1495, 1162, 1072, 651, 1600, 1599, 975, 269, 1598, 1597,
	110, 1593, 1568, 135, 172, 20, 1566, 108, 1565, 89,
	1564, 0, 82, 44, 1562, 125, 73, 1559, 1558, 1556,
	1555, 27, 3, 10, 4, 7, 6, 30, 29, 1554,
	1553, 126, 86, 1551, 140, 1548, 1547, 1546, 33, 1544,
	19, 1538, 12, 1526, 1524, 8, 2, 133, 1521, 101,
	1519, 1401, 1517, 137, 1516, 1511, 1406, 83,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 42,
	42, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 39, 39, 44, 44,
	44, 46, 46, 43, 43, 38, 38, 5, 5, 5,
	6, 6, 6, 6, 6, 12, 13, 13, 13, 13,
	13, 13, 13, 13, 84, 84, 83, 83, 86, 86,
	14, 14, 15, 15, 15, 15, 15, 15, 15, 15,
	171, 171, 170, 16, 147, 147, 17, 17, 17, 17,
	18, 107, 107, 19, 19, 19, 19, 20, 24, 237,
	237, 237, 241, 241, 242, 242, 243, 243, 243, 243,
	243, 243, 243, 239, 239, 27, 27, 27, 27, 27,
	126, 122, 122, 124, 124, 124, 124, 49, 121, 121,
	121, 121, 123, 123, 123, 123, 194, 193, 193, 199,
	199, 199, 62, 62, 62, 62, 62, 63, 63, 63,
	192, 192, 192, 192, 200, 200, 200, 200, 200, 200,
	64, 64, 64, 198, 198, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 238, 238, 240, 240, 29, 29, 9, 9,
	10, 10, 65, 65, 66, 66, 129, 129, 129, 129,
	67, 67, 45, 45, 45, 128, 209, 209, 210, 210,
	210, 210, 210, 210, 211, 211, 211, 211, 211, 211,
	211, 207, 207, 208, 205, 205, 206, 206, 206, 206,
	244, 244, 127, 127, 70, 70, 214, 214, 214, 214,
	212, 212, 212, 212, 212, 215, 213, 216, 216, 216,
	216, 216, 158, 158, 158, 31, 11, 8, 8, 111,
	111, 74, 74, 162, 162, 162, 56, 56, 40, 40,
	40, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	112, 112, 113, 113, 22, 26, 30, 30, 30, 30,
	30, 246, 246, 53, 53, 53, 53, 54, 54, 125,
	125, 125, 125, 125, 48, 7, 7, 47, 47, 21,
	21, 21, 21, 21, 59, 59, 118, 118, 118, 120,
	120, 119, 119, 119, 97, 97, 32, 79, 79, 88,
	88, 89, 89, 168, 90, 90, 25, 25, 35, 35,
	33, 33, 33, 33, 33, 33, 34, 34, 36, 36,
	36, 36, 36, 36, 36, 222, 222, 222, 224, 224,
	221, 223, 223, 245, 245, 98, 98, 98, 69, 68,
	68, 72, 72, 71, 73, 73, 161, 95, 95, 95,
	95, 114, 115, 115, 116, 116, 117, 117, 94, 94,
	144, 144, 37, 37, 78, 78, 80, 80, 135, 135,
	136, 136, 134, 134, 134, 163, 163, 163, 163, 164,
	164, 164, 164, 164, 164, 159, 159, 159, 159, 160,
	160, 169, 169, 101, 101, 101, 101, 99, 99, 100,
	100, 165, 165, 165, 165, 96, 96, 166, 166, 166,
	130, 130, 172, 172, 172, 77, 77, 77, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 174, 174, 174, 174, 176, 176, 176, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 177, 177, 184, 184, 185, 185, 186,
	187, 178, 178, 179, 179, 180, 181, 188, 188, 188,
	188, 190, 190, 182, 182, 182, 182, 182, 183, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 109, 109, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 217, 217, 217, 217,
	217, 217, 217, 219, 219, 220, 220, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 225, 225, 226, 226, 228, 228, 229,
	229, 230, 231, 231, 231, 232, 233, 233, 227, 227,
	234, 234, 234, 235, 235, 236, 236, 236, 236, 236,
	149, 149, 149, 150, 150, 151, 85, 85, 146, 146,
	145, 145, 145, 148, 148, 102, 189, 189, 189, 189,
	189, 189, 189, 103, 103, 110, 104, 104, 105, 105,
	105, 105, 105, 105, 141, 142, 106, 106, 106, 143,
	143, 152, 156, 156, 155, 154, 154, 153, 153, 133,
	133, 133, 133, 132, 131, 91, 91, 247, 247, 157,
	157, 92, 92, 93, 87, 87, 167, 167, 167, 167,
	81, 81, 61, 61, 82, 82, 57, 57, 60, 58,
	58, 58, 58, 75, 75, 76, 76, 55, 55, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	191, 191, 191, 50, 50, 50, 51, 51, 52, 52,
	196, 196, 196, 197, 197, 197, 197, 195, 195, 195,
	195, 195, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 6, 3, 5, 4, 6,
	4, 6, 4, 6, 1, 3, 1, 2, 2, 3,
	2, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	2, 4, 2, 0, 2, 0, 8, 8, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 6, 11, 14, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 4, 7, 3, 0, 6,
	6, 8, 5, 7, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 0, 8, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 1, 1, 8, 8,
	1, 2, 4, 4, 4, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 3, 0, 1, 3, 3, 1,
	1, 3, 2, 4, 0, 3, 2, 1, 4, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 1, 1, 3, 1, 1,
	1, 2, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 1,
	1, 3, 5, 2, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -18, -19, -20, -21, -23, -24, -26, -25, -27,
	-28, -29, -30, -22, -31, -32, 23, 64, -7, -8,
	-9, -10, -11, -223, 92, 100, 194, 99, 85, 116,
	208, 215, -33, -35, 223, -126, 224, 34, 233, 58,
	95, 210, 205, 254, 66, -222, -36, -34, 301, 276,
	282, 218, -37, 241, 268, 304, 241, 129, 78, -57,
	-50, 4, -201, -203, 20, 21, 23, 33, 34, 39,
	43, 46, 57, 58, 59, 61, 63, 64, 65, 68,
	69, 76, 77, 78, 79, 81, 85, 87, 91, 92,
	94, 99, 100, 105, 106, 109, 111, 117, 122, 123,
	130, 133, 128, 142, 144, 145, 150, 153, 156, 158,
	159, 160, 161, 162, 164, 165, 167, 169, 166, 172,
	174, 175, 181, 184, 187, 188, 189, 192, 194, 196,
	197, 198, 200, 201, 205, 203, 204, 206, 208, 210,
	211, 213, 215, 216, 217, 220, 221, 223, 224, 226,
	229, 232, 233, 234, 237, 235, 231, 240, 242, 243,
	250, 254, 255, 256, 257, 260, 261, 262, 265, 266,
	267, 272, 277, 278, 279, 280, 28, 35, 36, 37,
	38, 40, 41, 44, 45, 49, 50, 51, 53, 80,
	82, 83, 98, 101, 107, 115, 118, 120, 124, 125,
	134, 135, 136, 137, 139, 148, 171, 173, 182, 186,
	191, 193, 199, 212, 219, 227, 228, 236, 238, 245,
	246, 247, 251, 252, 268, 269, 87, 133, 262, 261,
	78, 129, 241, 271, -15, 301, -25, -6, -13, -4,
	-21, -32, -12, -14, 23, -50, -50, -50, 194, 22,
	-241, 22, -242, -243, 66, 92, 116, 218, 133, 87,
	261, -241, -54, 215, -50, -122, 153, 221, 212, 250,
	-123, -121, -194, 245, 162, -83, -50, 4, 78, 57,
	79, 117, 129, 130, 62, 63, 145, 242, 245, 250,
	22, 66, -246, 250, 250, -246, -246, -53, 250, 248,
	-54, -245, 241, 241, 271, -111, 78, 259, -34, -36,
	-35, -71, -72, 258, 138, 97, 180, -33, -35, -222,
	-224, 200, -221, -50, -224, -68, -69, 22, 89, 305,
	-165, -57, 178, -93, 301, -3, -165, 124, -57, -60,
	124, -57, -50, 113, 301, -91, -133, -132, -131, 299,
	303, 113, 140, 140, -166, -165, -50, 124, -61, 124,
	-60, -84, 124, -83, -84, 124, -171, -170, -197, 4,
	-201, -203, -202, 268, 55, 67, 114, 132, 126, 141,
	143, 149, 151, 163, 183, 185, 209, 225, 241, -147,
	301, -107, 301, -50, 22, 177, 305, 177, -50, -122,
	51, -122, 301, -124, -48, -49, 142, 196, 248, 286,
	113, 280, -64, 5, 84, -86, 303, 113, -238, 177,
	113, 113, 113, 113, 113, 113, 280, 142, 196, 241,
	-125, -48, -49, -125, 248, -54, -96, -165, -83, 124,
	-83, 129, -50, 124, -71, -72, -95, -114, -115, 152,
	176, -98, 22, 89, -98, -98, 43, 302, 302, 305,
	-224, -76, 301, -87, -167, -137, 294, -139, 292, 293,
	298, 168, 281, -149, -57, -140, 9, 301, -152, -219,
	-35, 98, 29, -150, -151, 212, -50, 7, 8, 5,
	6, -55, -174, -183, 253, 102, 170, 47, -217, -218,
	4, -201, -196, -175, -185, -179, -182, 139, 55, 71,
	74, 72, 75, 222, 263, 48, 28, 101, 186, 191,
	238, 251, 252, 124, 171, 125, 53, 118, 148, 91,
	36, 38, 40, 41, 49, 50, 80, 82, 83, 107,
	134, 135, 136, 137, 173, 199, 227, 236, 246, 247,
	269, -202, -186, -187, -180, -181, -188, -87, -93, 294,
	-57, 301, -92, -157, -137, 84, -42, 203, -41, 21,
	23, 92, 266, 98, 231, 231, 203, 98, 306, 203,
	234, 302, -81, -57, -133, -137, -195, 294, 4, -201,
	-203, -202, -204, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 42, 47, 48, 52, 54, 56, 62, 66,
	70, 71, 72, 73, 74, 75, 84, 86, 88, 89,
	90, 93, 95, 97, 102, 103, 104, 110, 112, 113,
	116, 119, 121, 127, 129, 131, 138, 140, 146, 147,
	152, 154, 155, 168, 170, 176, 177, 178, 179, 180,
	190, 195, 202, 207, 218, 222, 230, 239, 241, 244,
	248, 249, 253, 258, 259, 263, 264, 270, 271, 273,
	274, 275, 276, -166, -59, -57, -59, 223, -50, 30,
	98, -44, 305, 46, 206, 98, -44, 305, 98, -44,
	98, 302, 305, -165, 124, 30, -146, -172, -173, -175,
	-184, -178, -182, -183, 39, 45, 44, 243, 219, 228,
	37, 115, 134, 135, 136, 137, 227, 36, 199, 107,
	91, 83, 82, 173, 41, 40, -186, -187, -180, -181,
	80, 246, 247, 139, 38, 50, 49, 269, 236, -85,
	-137, -237, -82, 241, 78, -58, -50, 294, -243, -237,
	30, -85, 305, 305, 150, -63, 156, 167, 122, -193,
	84, -199, -192, -158, 9, 253, 102, 177, -198, 8,
	293, -191, -197, 5, 7, 292, -193, 84, 69, -200,
	5, 4, -183, -158, 84, 153, 303, -195, -194, -240,
	110, -237, -194, -194, -194, -194, -194, -50, 150, -194,
	305, 305, -54, -44, 305, 301, -70, 168, -70, 301,
	-51, 124, -50, -47, 94, 168, -95, -115, -114, -116,
	-137, 22, -137, -139, -34, -34, -34, -73, -161, -137,
	-221, 30, -75, -50, -78, 305, 113, 10, 11, 54,
	33, 292, 293, 294, 295, 108, 296, 289, 290, 291,
	288, 284, 285, 286, 60, 157, 214, 13, 14, 15,
	26, 179, 151, 281, 126, 225, 298, 16, 17, 18,
	141, 35, 127, 30, 4, -137, -137, -137, -137, -137,
	185, -35, -137, -85, -91, -35, -145, 299, 301, -91,
	301, 5, 5, 301, -153, -137, -225, 277, 110, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 193, -190, 272, -190, -190,
	-176, 301, -176, -177, 301, -176, 278, 282, 301, -78,
	-57, 305, 302, 305, 248, -112, 62, 56, -128, 124,
	56, -205, -50, 62, -206, 52, 259, 195, 112, -112,
	62, -112, 62, 62, -165, 33, 33, 248, -60, -50,
	248, 113, 302, 305, 300, 309, -130, 274, -118, -25,
	301, 84, 30, -118, -88, -89, -168, -90, -57, 301,
	-50, -50, -60, -61, -83, -84, -84, -15, -170, 98,
	-17, -25, -21, -32, -12, 302, 305, -77, 29, -108,
	301, 279, 160, 81, 123, 159, -109, 217, 302, 305,
	248, 305, -82, -75, -132, -131, 113, 250, 302, -49,
	-48, -62, 198, 229, 204, 220, 305, 8, 7, 7,
	5, -195, -239, -50, -49, -48, -165, -65, -75, -66,
	-50, -129, -128, -207, -208, -205, 129, 259, 103, 30,
	98, 30, 177, 168, 286, 98, -117, 212, 213, 305,
	-40, 31, 88, 301, 305, 302, -130, -167, -80, -163,
	-165, -35, -164, 301, -172, -172, -83, 245, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	151, 126, 225, 35, 127, -137, 248, -137, -137, -137,
	-137, 170, 168, 253, 102, 260, 89, 174, -247, 239,
	32, -143, -35, 301, -195, -149, 212, 301, 302, 305,
	-85, -148, 300, -145, -85, 302, 302, -85, 270, 22,
	89, 294, -108, 7, -156, -155, 273, -226, 105, 119,
	301, 302, 302, -137, -137, -102, -189, 4, 279, 160,
	81, 123, 159, 217, -103, -137, -104, -138, -139, 292,
	293, 298, 301, 212, -105, -137, -85, -137, 42, 147,
	249, -106, -137, 113, -85, -137, -137, -137, -85, -85,
	-85, 301, 7, 7, 245, 245, 7, -130, 302, -157,
	-41, -57, -50, -50, 168, -128, 124, -46, 168, -172,
	-50, 301, 301, 144, 144, -50, -50, 124, -50, 124,
	-50, -50, -42, 203, 301, 301, -50, 203, -50, 234,
	113, -57, -137, -97, 207, -137, -97, -120, 177, -81,
	268, -50, 207, -79, 305, 113, 286, -81, -44, -44,
	-44, -165, -172, 299, 299, 7, 248, 248, 248, 248,
	301, -137, -239, -58, -239, -48, 257, 59, 198, -199,
	-108, 305, 302, 302, 305, -51, 129, -51, -25, -83,
	-25, -57, 98, 5, -50, -161, -17, -50, -94, 119,
	-169, 305, 283, 67, -101, 143, 163, 114, 149, 209,
	132, -134, 306, -160, -159, 30, -50, -35, -164, -163,
	280, -137, -137, 248, -247, 239, -143, -137, 170, 253,
	102, 260, 89, 174, 113, 301, -138, -138, -85, 301,
	-85, -137, 300, 300, 305, 302, -72, 305, -71, -137,
	-85, -85, 302, 302, -154, -155, 93, -137, -231, 184,
	301, 301, -137, 30, 305, 302, 113, 302, -110, 190,
	302, 10, 11, 292, 293, 294, 295, 108, 296, 289,
	290, 291, 288, 284, 285, 286, 60, 157, 214, 13,
	14, 15, 141, 127, -138, -138, -138, -85, 301, 302,
	-141, -142, 113, 110, 30, -106, -106, -106, 302, 113,
	-85, 305, 305, 305, 302, 302, 302, 7, 302, 305,
	302, 280, 280, 302, -94, 248, 248, 98, 168, 265,
	-209, -206, -137, -75, 301, 301, -39, 92, 223, -113,
	98, -44, 98, -44, 248, -112, 62, -85, -85, 248,
	234, 300, -87, 207, 61, 302, -87, -130, -89, -80,
	-157, 302, 300, 7, 7, 302, 160, 123, 159, -109,
	159, -109, -109, 7, -50, -67, 128, -129, 301, -51,
	301, 301, -70, 301, -50, -47, 302, -144, 121, 43,
	-163, 174, 143, 143, -163, -101, 143, -99, 183, -99,
	-99, -160, -195, 307, -50, 301, 302, -137, -137, -138,
	-138, 113, 301, -137, -146, 26, 26, 302, -85, 302,
	305, 302, -145, 302, 270, -72, -72, -72, 5, 95,
	-137, 244, -232, -50, 301, 274, -71, 302, -172, -172,
	-137, -141, -137, -172, -172, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, 89, 168, 174, -138, 305, -85,
	302, -142, -141, -137, -137, -172, 302, 302, 302, -85,
	-137, -137, -137, 302, 7, -144, -50, -50, -128, 98,
	-210, 62, -211, 54, 103, 66, 168, 170, 259, 195,
	52, 84, 202, 302, 302, -75, -75, 168, 84, 168,
	84, 77, 255, -50, -50, -57, -50, -50, 302, 302,
	-50, -87, -119, 301, 177, -25, -97, 286, 300, 300,
	302, 127, -74, -162, -50, -220, 301, -217, -218, -55,
	301, -75, -65, 30, -74, 177, -228, 275, -137, -85,
	240, -163, -163, -100, 264, 177, 143, -163, -136, -135,
	111, 166, 301, -75, -159, 26, 26, -137, -146, 302,
	-137, -137, 302, -137, 5, -137, 302, 302, 302, -137,
	-233, -50, -137, 302, 302, 302, -142, 113, 89, 174,
	301, -137, 302, 302, 305, 302, 302, 302, -228, -128,
	-50, -83, -50, 103, 124, 170, 144, 301, -138, -57,
	-127, -244, 65, 237, 302, 302, 170, 170, -137, -172,
	-44, -44, 248, 248, 90, -75, 62, -93, -35, 301,
	187, 302, 305, -56, -91, 54, -56, -137, 301, -74,
	302, 302, -25, 302, -57, -229, -230, -50, 245, -100,
	301, -137, -163, 305, 308, 286, -75, 302, -137, -137,
	302, 302, -72, -227, 189, 302, -138, 113, 301, -146,
	302, -137, -211, -51, 168, -137, -52, 301, -67, 301,
	202, -43, 54, -50, -50, 261, 169, 302, -50, -50,
	-127, -162, -40, -83, -40, 302, -85, 302, -67, -127,
	301, 305, 30, 5, -75, -135, -195, 302, 302, -72,
	43, -138, -146, 302, 302, 98, 302, -214, 158, -50,
	-75, -57, -38, 264, -83, 223, -130, 301, -67, -56,
	-72, -127, -67, -74, -230, -232, 302, -234, 197, 213,
	-85, 302, 103, -212, -215, -213, 177, 114, 188, 226,
	302, 302, -70, -137, -88, -75, -40, 302, -67, 302,
	302, -235, -236, 35, 256, 69, -137, -235, -50, -213,
	177, -215, 177, 261, 87, -214, -130, 302, -127, -236,
	192, 109, 212, 192, 109, -216, 165, 206, 46, 223,
	-216, -212, -45, 46, 206, -67, 26, 20, 170, 84,
	-236,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 60, 61,
	62, 63, 64, 0, 0, 372, 0, 0, 0, 0,
	0, 0, 346, -2, 0, 129, 0, 302, 0, 302,
	302, 306, 0, 374, 270, 371, -2, 382, 0, 0,
	0, 380, 360, 0, 0, -2, 0, 0, 0, 0,
	776, 803, 804, 805, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 82, 83, 84, 85,
	86, 87, 88, 89, 0, 95, 102, 103, 886, 105,
	0, 112, 113, 114, 116, 117, 118, 119, 120, 121,
	122, 0, 295, 900, 308, 125, 865, 904, 971, 918,
	132, 142, 0, 977, -2, 146, 76, 175, 176, 0,
	178, 193, 0, 0, 0, 0, 0, 186, 0, 0,
	190, 0, 313, 301, 313, 298, 299, 300, 303, 0,
	294, 0, 373, 0, 0, 0, 0, 269, -2, 356,
	357, -2, 0, 377, 377, 377, 0, 0, 357, 0,
	365, 890, 368, 786, 366, 0, 0, 379, 378, 0,
	361, 441, 0, 402, 0, 2, 0, 956, 441, 0,
	956, 0, 0, 0, 0, 777, 755, 749, 750, 0,
	0, 0, 0, 0, 0, 447, 66, 956, 50, 956,
	772, 50, 956, 74, 50, 956, 0, 90, 92, 813,
	814, 815, 816, 982, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 0, 0,
	0, 100, 0, 104, 106, 0, 0, 0, 307, 126,
	945, 128, 0, 131, 133, 134, 0, 0, 0, 0,
	0, 0, 145, 170, 171, 77, 0, 0, 195, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 189, 0,
	296, 309, 310, 297, 0, 305, 50, 445, 245, 956,
	245, 807, 318, 956, -2, 0, 352, 389, 390, 0,
	0, 0, 375, 376, 0, 0, 0, 348, 349, 0,
	367, 0, 0, 405, 764, 768, 769, 535, 0, 0,
	0, 0, 0, 0, 624, 625, 626, 0, 628, 629,
	630, 950, 0, 634, 635, 971, 776, 789, 790, 791,
	792, 0, 0, 0, 797, 798, 799, 748, 674, 644,
	-2, -2, 787, 472, 473, 474, 475, -2, 984, 648,
	650, 652, 653, 654, 655, 0, 934, 951, 967, 968,
	976, 980, 981, 956, 964, 957, 946, 954, 963, 846,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 812, 497, 498, 503, 504, 506, 405, 403, 442,
	443, 0, 0, 761, 759, 760, 27, 291, 29, 0,
	291, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 770, 756, 0, 753, 754, 817, 818,
	819, 820, 821, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 451, 0, 324, 0, 0, 448, 0,
	0, 68, 0, 48, 49, 0, 70, 0, 0, 72,
	0, 372, 0, 0, 956, 372, 0, 708, 457, 458,
	459, 460, 461, 532, 464, 465, 466, 467, 468, 469,
	470, 471, 479, 480, 481, 482, 483, 484, 485, 494,
	0, 478, 478, 478, 491, 492, 495, 496, 501, 502,
	513, 514, 516, 518, 512, 512, 512, 509, 510, 0,
	706, 0, 109, 0, 841, 774, 779, 780, 115, 0,
	0, 0, 0, 0, 0, 137, 157, 158, 159, 138,
	140, 147, 149, 150, 151, 160, 161, 162, 163, 262,
	0, 264, 173, 174, 800, 0, 139, 141, 143, 144,
	164, 165, 0, 167, 168, 169, 0, 78, 177, 179,
	0, 192, 180, 181, 182, 183, 184, 185, 188, 191,
	0, 0, 304, 265, 0, 203, 0, 0, 0, 0,
	0, 956, 806, 315, 0, 0, 355, 387, 388, 391,
	394, 395, 392, 535, 362, 363, 364, 383, 384, 280,
	369, 0, 0, 783, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 767, 540, 541, 542, 564, 565,
	0, -2, 706, 0, 631, 632, 633, 0, 0, -2,
	0, 794, 532, 0, 0, 747, 676, 0, 0, 0,
	0, 0, 0, 0, 0, 727, 733, 0, 0, 0,
	0, 0, 0, 0, 0, 487, 500, 511, 508, 507,
	489, 0, 488, 486, 0, 490, 0, 0, 0, 451,
	0, 0, 763, 0, 0, 0, 0, 290, 31, 956,
	0, 52, 0, 0, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 778,
	0, 0, 0, 0, 751, 0, 335, 0, 335, 326,
	0, 0, 0, 322, 338, 339, 341, 342, 0, 0,
	449, 67, 773, 50, 75, 50, 50, 81, 91, 0,
	93, 96, 97, 98, 99, 94, 0, 452, 454, 462,
	0, 519, 520, 521, 522, 523, 524, 533, 101, 0,
	0, 0, 110, 111, 781, 782, 0, 0, 130, 135,
	136, 314, 0, 154, 0, 156, 0, 263, 802, 801,
	532, 79, 194, 123, 311, 312, 446, 0, 0, 202,
	783, 204, 206, 207, 208, 209, 807, 0, 807, 0,
	0, 0, 0, 0, 0, 0, 393, 396, 397, 0,
	386, 278, 279, 372, 0, 785, 399, 765, 432, 406,
	414, 430, 417, 0, 536, 537, 538, 0, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, -2, -2,
	-2, 556, 557, 558, -2, -2, -2, 562, 563, -2,
	0, 0, 0, 758, 0, -2, 0, 572, -2, -2,
	-2, 576, 0, 579, 581, 583, 0, 0, 0, 0,
	757, 593, 739, 0, 766, 578, 0, 0, 627, 0,
	0, 0, 712, 713, 0, -2, 636, 382, 0, 0,
	0, 0, 795, 0, 746, 742, 0, 684, 0, 0,
	0, 649, 651, 0, 0, 0, 0, 716, 717, 718,
	719, 720, 721, 722, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 971, 0, 706, 732, 0, 0, 0,
	0, 0, 706, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 399, 444, 762,
	30, 282, 0, 0, 0, 33, 956, 41, 0, 217,
	0, 0, 0, 0, 0, 293, 42, 956, 50, 956,
	50, 43, 28, 291, 0, 0, 284, 0, 281, 58,
	0, 771, 0, 65, 0, 450, 319, 320, 0, 0,
	328, 325, 0, 451, 0, 0, 0, 0, 69, 71,
	73, 0, 709, 0, 0, 0, 0, 0, 0, 0,
	0, 707, 107, 775, 108, 127, 152, 153, 155, 148,
	166, 0, 211, 244, 0, 0, 807, 0, 200, 245,
	266, 0, 0, 317, 318, 385, 0, 784, 401, 0,
	404, 0, 0, 0, 0, 0, 0, 438, 438, 438,
	436, 430, 0, 416, 429, 0, 428, -2, 417, 0,
	0, -2, -2, 0, 0, 0, 594, -2, 577, 580,
	582, 584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 707, 710, 711, 0, -2, 0, 0, 381, 382,
	382, 382, 642, 0, 0, 743, 0, 0, 643, 0,
	0, 0, 0, 0, 0, 658, 0, 659, 0, 0,
	660, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 599, 600, 0, 0, 661,
	730, 731, 0, 0, 0, 0, 0, 0, 666, 0,
	737, 0, 0, 0, 670, 671, 672, 0, 476, 0,
	493, 515, 517, 505, 401, 0, 0, 0, 0, 51,
	215, 234, 0, 0, 0, 0, 35, 0, 0, 0,
	0, 39, 0, 45, 0, 0, 0, 0, 0, 0,
	59, 752, 334, 0, 333, 0, 323, 335, 340, 337,
	343, 0, 455, 0, 0, 463, 525, 526, 527, 528,
	529, 530, 531, 0, 124, 198, 0, 205, 0, 0,
	0, 203, 0, 0, 0, 316, 370, 678, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 433, 437, 434,
	435, 415, 412, 0, 426, 0, 419, 539, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 740, 0, 701,
	0, -2, 714, 637, 0, 0, 0, 0, 796, 741,
	745, 0, 682, 683, 687, 0, 0, 647, 0, 0,
	715, 724, 725, 596, 597, 601, 602, 603, 604, 605,
	606, 607, 608, 609, 610, -2, -2, -2, 614, 615,
	616, -2, -2, -2, 0, 0, 0, 726, 0, 0,
	704, 728, 729, 734, 735, 0, 663, 664, 665, 736,
	0, 0, 0, 499, 0, 678, 286, 288, 32, 0,
	216, 0, 219, 0, 0, 0, 0, 225, 226, 0,
	0, 0, 0, 236, 243, 0, 0, 0, 47, 0,
	0, 292, 0, 50, 50, 283, 0, 0, 196, 197,
	285, 321, 0, 0, 0, 327, 336, 0, 456, 453,
	534, 0, 0, 271, 277, 277, 0, 645, 646, 0,
	0, 0, 0, 0, 0, 0, 358, 0, 400, 398,
	0, 420, 0, 422, 0, 0, 0, 424, 0, 410,
	0, 409, 0, 0, 418, 0, 0, -2, 0, 587,
	-2, -2, 700, 707, 793, 382, 638, 640, 641, 744,
	689, 686, 0, 673, 656, 657, 723, 0, 0, 0,
	0, 707, 703, 662, 0, 668, 669, 477, 359, 34,
	0, 220, 221, 807, 0, 224, 227, 0, 229, 809,
	211, 0, 240, 241, 238, 0, 36, 37, 46, 54,
	38, 44, 0, 0, 0, 0, 0, 344, 345, 0,
	0, 243, 0, 280, 788, 0, 280, 0, 0, 0,
	233, 211, 201, 243, 0, 677, 679, 0, 0, 421,
	0, 440, 423, 0, 413, 0, 0, 427, -2, -2,
	588, 702, 0, 382, 0, 675, -2, 0, 0, 0,
	705, 0, 218, 222, 0, 0, 249, 0, 237, 0,
	0, 56, 0, 287, 289, 0, 330, 451, 332, 0,
	211, 272, 273, 276, 274, 277, 382, 243, 199, 211,
	0, 0, 0, 431, 0, 411, 408, 425, 639, 692,
	0, -2, 0, 622, 667, 0, 228, 254, 0, 0,
	0, 245, 40, 0, 53, 0, 331, 0, 231, 280,
	0, 211, 267, 0, 680, 681, 439, 0, 0, 0,
	688, 623, 0, 230, 250, 251, 0, 246, 247, 248,
	808, 242, 249, 55, 451, 0, 275, 637, 232, 243,
	685, 690, 693, -2, 921, 838, 0, 691, 223, 252,
	0, 253, 0, 0, 0, 254, 329, 214, 211, 0,
	695, 696, 697, 698, 699, 255, 0, 258, 259, 0,
	256, 239, 210, 212, 213, 268, 0, 257, 260, 261,
	694,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 290, 3, 296, 291, 3,
	301, 302, 294, 292, 305, 293, 303, 295, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 309, 304,
	284, 286, 285, 3, 306, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 299, 3, 300, 289, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 307, 288, 308, 298,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 287, 57627, 297, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:728
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:734
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:740
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:831
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:849
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:859
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			unimplementedWithIssue(2473)
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			unimplemented()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:926
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{ /* SKIP DOC */
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{ /* SKIP DOC */
		}
	case 130:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			unimplemented()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1320
		{
			unimplemented()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = Low
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = Normal
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = High
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			unimplemented()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			unimplemented()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1433
		{
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = DropDefault
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1824
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1827
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1838
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1844
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = true
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = false
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			unimplemented()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1942
		{
			unimplemented()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1946
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = Ascending
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = Descending
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = true
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = false
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2013
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2055
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2056
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.str = ""
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.str = ""
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2150
		{
			unimplementedWithIssue(6637)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2157
		{
			unimplementedWithIssue(6637)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			unimplemented()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			unimplementedWithIssue(7841)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2229
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2456
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2458
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			unimplemented()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2465
		{
			unimplemented()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2468
		{
			unimplemented()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2469
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2472
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2473
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = true
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = false
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = false
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = true
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2496
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2497
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2596
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2647
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &From{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2695
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.str = astFullJoin
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.str = astLeftJoin
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.str = astRightJoin
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.str = astInnerJoin
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2841
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2842
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2932
		{
			unimplementedWithIssue(2115)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2933
		{
			unimplementedWithIssue(2115)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2936
		{
			unimplementedWithIssue(2115)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2937
		{
			unimplementedWithIssue(2115)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2938
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2946
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = geographyColTypeGeography
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2997
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3006
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = nil
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3127
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3159
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3199
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3230
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3243
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3247
		{
			unimplemented()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			unimplemented()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3279
		{
			unimplemented()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3690
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3691
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3714
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3752
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3779
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3823
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3824
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3827
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3828
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = Window(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.str = ""
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3915
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3917
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3921
		{
			unimplemented()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			unimplemented()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3928
		{
			unimplemented()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3929
		{
			unimplemented()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3930
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			unimplemented()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4260
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4416
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4452
		{
			unimplemented()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = DNull
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.str = ""
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
